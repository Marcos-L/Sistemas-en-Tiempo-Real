
Sensor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c10  08005c10  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c18  08005c18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004aec  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b60  20004b60  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003457  00000000  00000000  00039c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e0  00000000  00000000  0003e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256c6  00000000  00000000  0003f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016715  00000000  00000000  00064e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3884  00000000  00000000  0007b57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015edff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000570c  00000000  00000000  0015ee50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a78 	.word	0x08005a78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005a78 	.word	0x08005a78

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a14      	ldr	r2, [pc, #80]	; (800054c <MX_FREERTOS_Init+0x58>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4814      	ldr	r0, [pc, #80]	; (8000550 <MX_FREERTOS_Init+0x5c>)
 80004fe:	f002 fb11 	bl	8002b24 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a13      	ldr	r2, [pc, #76]	; (8000554 <MX_FREERTOS_Init+0x60>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of Read_Sensor */
  Read_SensorHandle = osThreadNew(StartRead_Sensor, NULL, &Read_Sensor_attributes);
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <MX_FREERTOS_Init+0x64>)
 800050a:	2100      	movs	r1, #0
 800050c:	4813      	ldr	r0, [pc, #76]	; (800055c <MX_FREERTOS_Init+0x68>)
 800050e:	f002 fb09 	bl	8002b24 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <MX_FREERTOS_Init+0x6c>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of NDVIRead */
  NDVIReadHandle = osThreadNew(StartNDVIRead, NULL, &NDVIRead_attributes);
 8000518:	4a12      	ldr	r2, [pc, #72]	; (8000564 <MX_FREERTOS_Init+0x70>)
 800051a:	2100      	movs	r1, #0
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <MX_FREERTOS_Init+0x74>)
 800051e:	f002 fb01 	bl	8002b24 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <MX_FREERTOS_Init+0x78>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of Feedback */
  FeedbackHandle = osThreadNew(StartFeedback, NULL, &Feedback_attributes);
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <MX_FREERTOS_Init+0x7c>)
 800052a:	2100      	movs	r1, #0
 800052c:	4811      	ldr	r0, [pc, #68]	; (8000574 <MX_FREERTOS_Init+0x80>)
 800052e:	f002 faf9 	bl	8002b24 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <MX_FREERTOS_Init+0x84>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of Debounce */
  DebounceHandle = osThreadNew(StartDebounce, NULL, &Debounce_attributes);
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <MX_FREERTOS_Init+0x88>)
 800053a:	2100      	movs	r1, #0
 800053c:	4810      	ldr	r0, [pc, #64]	; (8000580 <MX_FREERTOS_Init+0x8c>)
 800053e:	f002 faf1 	bl	8002b24 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <MX_FREERTOS_Init+0x90>)
 8000546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	08005ae4 	.word	0x08005ae4
 8000550:	08000589 	.word	0x08000589
 8000554:	200000a4 	.word	0x200000a4
 8000558:	08005b08 	.word	0x08005b08
 800055c:	08000599 	.word	0x08000599
 8000560:	200000a8 	.word	0x200000a8
 8000564:	08005b2c 	.word	0x08005b2c
 8000568:	08000669 	.word	0x08000669
 800056c:	200000ac 	.word	0x200000ac
 8000570:	08005b50 	.word	0x08005b50
 8000574:	0800073d 	.word	0x0800073d
 8000578:	200000b0 	.word	0x200000b0
 800057c:	08005b74 	.word	0x08005b74
 8000580:	08000821 	.word	0x08000821
 8000584:	200000b4 	.word	0x200000b4

08000588 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f002 fb59 	bl	8002c48 <osDelay>
 8000596:	e7fb      	b.n	8000590 <StartDefaultTask+0x8>

08000598 <StartRead_Sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_Sensor */
void StartRead_Sensor(void *argument)
{
 8000598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800059c:	b089      	sub	sp, #36	; 0x24
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRead_Sensor */
  /* Infinite loop */
	for(;;){
 80005a2:	466b      	mov	r3, sp
 80005a4:	461e      	mov	r6, r3
	  vTaskSuspend(NULL);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f003 fb2a 	bl	8003c00 <vTaskSuspend>
	  char n = 3;
 80005ac:	2303      	movs	r3, #3
 80005ae:	75fb      	strb	r3, [r7, #23]
	  char Msg[n];
 80005b0:	7df9      	ldrb	r1, [r7, #23]
 80005b2:	460b      	mov	r3, r1
 80005b4:	3b01      	subs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	b2cb      	uxtb	r3, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	461c      	mov	r4, r3
 80005be:	4615      	mov	r5, r2
 80005c0:	f04f 0200 	mov.w	r2, #0
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	00eb      	lsls	r3, r5, #3
 80005ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005ce:	00e2      	lsls	r2, r4, #3
 80005d0:	b2cb      	uxtb	r3, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	4698      	mov	r8, r3
 80005d6:	4691      	mov	r9, r2
 80005d8:	f04f 0200 	mov.w	r2, #0
 80005dc:	f04f 0300 	mov.w	r3, #0
 80005e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005ec:	460b      	mov	r3, r1
 80005ee:	3307      	adds	r3, #7
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	ebad 0d03 	sub.w	sp, sp, r3
 80005f8:	466b      	mov	r3, sp
 80005fa:	3300      	adds	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
	  int s = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
	  HAL_UART_Receive(&huart6, Msg, n, 5000);
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f241 3388 	movw	r3, #5000	; 0x1388
 800060a:	68f9      	ldr	r1, [r7, #12]
 800060c:	4813      	ldr	r0, [pc, #76]	; (800065c <StartRead_Sensor+0xc4>)
 800060e:	f001 fe76 	bl	80022fe <HAL_UART_Receive>

	  for(int i = 0;i++;i<n-1){
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	e007      	b.n	8000628 <StartRead_Sensor+0x90>
		  s += Msg[i];
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	4413      	add	r3, r2
 8000626:	61bb      	str	r3, [r7, #24]
	  for(int i = 0;i++;i<n-1){
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	61fa      	str	r2, [r7, #28]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f2      	bne.n	8000618 <StartRead_Sensor+0x80>
	  }

	  if(s==Msg[n-1]){
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3b01      	subs	r3, #1
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	5cd3      	ldrb	r3, [r2, r3]
 800063a:	461a      	mov	r2, r3
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4293      	cmp	r3, r2
 8000640:	d109      	bne.n	8000656 <StartRead_Sensor+0xbe>
		  Hum = Msg[0];
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <StartRead_Sensor+0xc8>)
 800064a:	601a      	str	r2, [r3, #0]
		  Lum = Msg[1];
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	785b      	ldrb	r3, [r3, #1]
 8000650:	461a      	mov	r2, r3
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <StartRead_Sensor+0xcc>)
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	46b5      	mov	sp, r6
	for(;;){
 8000658:	e7a3      	b.n	80005a2 <StartRead_Sensor+0xa>
 800065a:	bf00      	nop
 800065c:	20000100 	.word	0x20000100
 8000660:	2000009c 	.word	0x2000009c
 8000664:	200000a0 	.word	0x200000a0

08000668 <StartNDVIRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNDVIRead */
void StartNDVIRead(void *argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNDVIRead */
  /* Infinite loop */
	for(;;){
	  vTaskSuspend(NULL);
 8000670:	2000      	movs	r0, #0
 8000672:	f003 fac5 	bl	8003c00 <vTaskSuspend>
	  NDVI = (IR-LR)/(IR+LR);
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <StartNDVIRead+0xbc>)
 8000678:	ed93 7a00 	vldr	s14, [r3]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <StartNDVIRead+0xc0>)
 800067e:	edd3 7a00 	vldr	s15, [r3]
 8000682:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <StartNDVIRead+0xbc>)
 8000688:	ed93 7a00 	vldr	s14, [r3]
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <StartNDVIRead+0xc0>)
 800068e:	edd3 7a00 	vldr	s15, [r3]
 8000692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <StartNDVIRead+0xc4>)
 800069c:	edc3 7a00 	vstr	s15, [r3]
	  NDVI *= 100;
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <StartNDVIRead+0xc4>)
 80006a2:	edd3 7a00 	vldr	s15, [r3]
 80006a6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000730 <StartNDVIRead+0xc8>
 80006aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <StartNDVIRead+0xc4>)
 80006b0:	edc3 7a00 	vstr	s15, [r3]
	  int NDVI_int = (int)NDVI;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <StartNDVIRead+0xc4>)
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006be:	ee17 3a90 	vmov	r3, s15
 80006c2:	60fb      	str	r3, [r7, #12]

	  switch (NDVI_int){
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b64      	cmp	r3, #100	; 0x64
 80006c8:	dc20      	bgt.n	800070c <StartNDVIRead+0xa4>
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b43      	cmp	r3, #67	; 0x43
 80006ce:	da1f      	bge.n	8000710 <StartNDVIRead+0xa8>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2b42      	cmp	r3, #66	; 0x42
 80006d4:	dc1a      	bgt.n	800070c <StartNDVIRead+0xa4>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b22      	cmp	r3, #34	; 0x22
 80006da:	da11      	bge.n	8000700 <StartNDVIRead+0x98>
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dc04      	bgt.n	80006ec <StartNDVIRead+0x84>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80006e8:	da14      	bge.n	8000714 <StartNDVIRead+0xac>
			  break;
		  case 67 ... 100:
			  //La planta esta perfecta
			  break;
		  default:
			  break;
 80006ea:	e00f      	b.n	800070c <StartNDVIRead+0xa4>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3b01      	subs	r3, #1
	  switch (NDVI_int){
 80006f0:	2b20      	cmp	r3, #32
 80006f2:	d80b      	bhi.n	800070c <StartNDVIRead+0xa4>
		  	  vTaskResume(Read_SensorHandle);
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <StartNDVIRead+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fb29 	bl	8003d50 <vTaskResume>
			  break;
 80006fe:	e00a      	b.n	8000716 <StartNDVIRead+0xae>
		  	  vTaskResume(Read_SensorHandle);
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <StartNDVIRead+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fb23 	bl	8003d50 <vTaskResume>
			  break;
 800070a:	e004      	b.n	8000716 <StartNDVIRead+0xae>
			  break;
 800070c:	bf00      	nop
 800070e:	e002      	b.n	8000716 <StartNDVIRead+0xae>
			  break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <StartNDVIRead+0xae>
			  break;
 8000714:	bf00      	nop
	  }
	  vTaskResume(FeedbackHandle);
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <StartNDVIRead+0xd0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fb18 	bl	8003d50 <vTaskResume>
	for(;;){
 8000720:	e7a6      	b.n	8000670 <StartNDVIRead+0x8>
 8000722:	bf00      	nop
 8000724:	20000090 	.word	0x20000090
 8000728:	20000094 	.word	0x20000094
 800072c:	20000098 	.word	0x20000098
 8000730:	42c80000 	.word	0x42c80000
 8000734:	200000a8 	.word	0x200000a8
 8000738:	200000b0 	.word	0x200000b0

0800073c <StartFeedback>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFeedback */
void StartFeedback(void *argument)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFeedback */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(NULL);
 8000744:	2000      	movs	r0, #0
 8000746:	f003 fa5b 	bl	8003c00 <vTaskSuspend>
	int NDVI_int = (int)NDVI;
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <StartFeedback+0xdc>)
 800074c:	edd3 7a00 	vldr	s15, [r3]
 8000750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000754:	ee17 3a90 	vmov	r3, s15
 8000758:	60fb      	str	r3, [r7, #12]
	switch (NDVI_int){
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b64      	cmp	r3, #100	; 0x64
 800075e:	dc59      	bgt.n	8000814 <StartFeedback+0xd8>
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b43      	cmp	r3, #67	; 0x43
 8000764:	da45      	bge.n	80007f2 <StartFeedback+0xb6>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b42      	cmp	r3, #66	; 0x42
 800076a:	dc53      	bgt.n	8000814 <StartFeedback+0xd8>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b22      	cmp	r3, #34	; 0x22
 8000770:	da2e      	bge.n	80007d0 <StartFeedback+0x94>
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dc04      	bgt.n	8000782 <StartFeedback+0x46>
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800077e:	da05      	bge.n	800078c <StartFeedback+0x50>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 8000780:	e048      	b.n	8000814 <StartFeedback+0xd8>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3b01      	subs	r3, #1
	switch (NDVI_int){
 8000786:	2b20      	cmp	r3, #32
 8000788:	d844      	bhi.n	8000814 <StartFeedback+0xd8>
 800078a:	e010      	b.n	80007ae <StartFeedback+0x72>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4822      	ldr	r0, [pc, #136]	; (800081c <StartFeedback+0xe0>)
 8000794:	f000 fdfc 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	481f      	ldr	r0, [pc, #124]	; (800081c <StartFeedback+0xe0>)
 800079e:	f000 fdf7 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2101      	movs	r1, #1
 80007a6:	481d      	ldr	r0, [pc, #116]	; (800081c <StartFeedback+0xe0>)
 80007a8:	f000 fdf2 	bl	8001390 <HAL_GPIO_WritePin>
		  break;
 80007ac:	e033      	b.n	8000816 <StartFeedback+0xda>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	4819      	ldr	r0, [pc, #100]	; (800081c <StartFeedback+0xe0>)
 80007b6:	f000 fdeb 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4817      	ldr	r0, [pc, #92]	; (800081c <StartFeedback+0xe0>)
 80007c0:	f000 fde6 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	4814      	ldr	r0, [pc, #80]	; (800081c <StartFeedback+0xe0>)
 80007ca:	f000 fde1 	bl	8001390 <HAL_GPIO_WritePin>
		  break;
 80007ce:	e022      	b.n	8000816 <StartFeedback+0xda>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <StartFeedback+0xe0>)
 80007d8:	f000 fdda 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	480e      	ldr	r0, [pc, #56]	; (800081c <StartFeedback+0xe0>)
 80007e2:	f000 fdd5 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <StartFeedback+0xe0>)
 80007ec:	f000 fdd0 	bl	8001390 <HAL_GPIO_WritePin>
		  break;
 80007f0:	e011      	b.n	8000816 <StartFeedback+0xda>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <StartFeedback+0xe0>)
 80007fa:	f000 fdc9 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <StartFeedback+0xe0>)
 8000804:	f000 fdc4 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <StartFeedback+0xe0>)
 800080e:	f000 fdbf 	bl	8001390 <HAL_GPIO_WritePin>
		  break;
 8000812:	e000      	b.n	8000816 <StartFeedback+0xda>
		  break;
 8000814:	bf00      	nop
  {
 8000816:	e795      	b.n	8000744 <StartFeedback+0x8>
 8000818:	20000098 	.word	0x20000098
 800081c:	40020400 	.word	0x40020400

08000820 <StartDebounce>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebounce */
void StartDebounce(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebounce */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000828:	2000      	movs	r0, #0
 800082a:	f003 f9e9 	bl	8003c00 <vTaskSuspend>
	  // Inhabilita IRQ
	  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f000 fbdc 	bl	8000fec <HAL_NVIC_DisableIRQ>
	  osDelay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f002 fa07 	bl	8002c48 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET)
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <StartDebounce+0x48>)
 8000840:	f000 fd8e 	bl	8001360 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10a      	bne.n	8000860 <StartDebounce+0x40>
	  {
		 IR = 3.4;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <StartDebounce+0x4c>)
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <StartDebounce+0x50>)
 800084e:	601a      	str	r2, [r3, #0]
		 LR = 6.2;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <StartDebounce+0x54>)
 8000852:	4a09      	ldr	r2, [pc, #36]	; (8000878 <StartDebounce+0x58>)
 8000854:	601a      	str	r2, [r3, #0]
		 vTaskResume(NDVIReadHandle);
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <StartDebounce+0x5c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fa78 	bl	8003d50 <vTaskResume>
	  }
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000860:	2028      	movs	r0, #40	; 0x28
 8000862:	f000 fbb5 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
	  vTaskSuspend(NULL);
 8000866:	e7df      	b.n	8000828 <StartDebounce+0x8>
 8000868:	40020800 	.word	0x40020800
 800086c:	20000090 	.word	0x20000090
 8000870:	4059999a 	.word	0x4059999a
 8000874:	20000094 	.word	0x20000094
 8000878:	40c66666 	.word	0x40c66666
 800087c:	200000ac 	.word	0x200000ac

08000880 <HAL_GPIO_EXTI_Callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9){
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000890:	d105      	bne.n	800089e <HAL_GPIO_EXTI_Callback+0x1e>
		xTaskResumeFromISR(DebounceHandle);
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fab8 	bl	8003e0c <xTaskResumeFromISR>
		}
	else{
		__NOP();
	}
}
 800089c:	e000      	b.n	80008a0 <HAL_GPIO_EXTI_Callback+0x20>
		__NOP();
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000b4 	.word	0x200000b4

080008ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_GPIO_Init+0xc8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_GPIO_Init+0xc8>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_GPIO_Init+0xc8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f244 0181 	movw	r1, #16513	; 0x4081
 800091c:	4816      	ldr	r0, [pc, #88]	; (8000978 <MX_GPIO_Init+0xcc>)
 800091e:	f000 fd37 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000928:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <MX_GPIO_Init+0xd0>)
 800093a:	f000 fb65 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800093e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_GPIO_Init+0xcc>)
 8000958:	f000 fb56 	bl	8001008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2105      	movs	r1, #5
 8000960:	2028      	movs	r0, #40	; 0x28
 8000962:	f000 fb19 	bl	8000f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000966:	2028      	movs	r0, #40	; 0x28
 8000968:	f000 fb32 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020400 	.word	0x40020400
 800097c:	40020800 	.word	0x40020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 f9ea 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f80c 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff8e 	bl	80008ac <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000990:	f000 f948 	bl	8000c24 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000994:	f002 f87c 	bl	8002a90 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000998:	f7ff fdac 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800099c:	f002 f89c 	bl	8002ad8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <main+0x20>
	...

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 ff96 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <SystemClock_Config+0xcc>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <SystemClock_Config+0xcc>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <SystemClock_Config+0xcc>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <SystemClock_Config+0xd0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <SystemClock_Config+0xd0>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a1c:	23a0      	movs	r3, #160	; 0xa0
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fce1 	bl	80013f4 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a38:	f000 f830 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2101      	movs	r1, #1
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 ff44 	bl	80018e4 <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a62:	f000 f81b 	bl	8000a9c <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3750      	adds	r7, #80	; 0x50
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8a:	f000 f989 	bl	8000da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40000800 	.word	0x40000800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <HAL_MspInit+0x54>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_MspInit+0x54>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fa53 	bl	8000f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	201e      	movs	r0, #30
 8000b16:	f000 fa3f 	bl	8000f98 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b1a:	201e      	movs	r0, #30
 8000b1c:	f000 fa58 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <HAL_InitTick+0xa0>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_InitTick+0xa0>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_InitTick+0xa0>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3c:	f107 0210 	add.w	r2, r7, #16
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f8ac 	bl	8001ca4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4c:	f001 f882 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8000b50:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	0c9b      	lsrs	r3, r3, #18
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <HAL_InitTick+0xac>)
 8000b64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b6c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b72:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b82:	f001 f8c1 	bl	8001d08 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d104      	bne.n	8000b96 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b8e:	f001 f915 	bl	8001dbc <HAL_TIM_Base_Start_IT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3730      	adds	r7, #48	; 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	200000b8 	.word	0x200000b8
 8000bac:	40000800 	.word	0x40000800

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM4_IRQHandler+0x10>)
 8000be2:	f001 f95b 	bl	8001e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000b8 	.word	0x200000b8

08000bf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bf4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bf8:	f000 fbe4 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_USART6_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USART6_UART_Init+0x4c>)
 8000c5c:	f001 fb02 	bl	8002264 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c66:	f7ff ff19 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000100 	.word	0x20000100
 8000c74:	40011400 	.word	0x40011400

08000c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12c      	bne.n	8000cf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000cd2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cf0:	f000 f98a 	bl	8001008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40011400 	.word	0x40011400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40021800 	.word	0x40021800

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d32:	f7ff ff65 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 fda1 	bl	800587c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fe21 	bl	8000980 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d4c:	08005c20 	.word	0x08005c20
  ldr r2, =_sbss
 8000d50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d54:	20004b60 	.word	0x20004b60

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f8fc 	bl	8000f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f7ff feb8 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe8a 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000144 	.word	0x20000144

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000144 	.word	0x20000144

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db12      	blt.n	8000eb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	490a      	ldr	r1, [pc, #40]	; (8000ec4 <__NVIC_DisableIRQ+0x44>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	3320      	adds	r3, #32
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eac:	f3bf 8f4f 	dsb	sy
}
 8000eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb2:	f3bf 8f6f 	isb	sy
}
 8000eb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff28 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff3d 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ffb1 	bl	8000f1c <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff80 	bl	8000ec8 <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff30 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff40 	bl	8000e80 <__NVIC_DisableIRQ>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e177      	b.n	8001314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 8166 	bne.w	800130e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	2b02      	cmp	r3, #2
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80c0 	beq.w	800130e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b66      	ldr	r3, [pc, #408]	; (800132c <HAL_GPIO_Init+0x324>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a65      	ldr	r2, [pc, #404]	; (800132c <HAL_GPIO_Init+0x324>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b63      	ldr	r3, [pc, #396]	; (800132c <HAL_GPIO_Init+0x324>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	4a61      	ldr	r2, [pc, #388]	; (8001330 <HAL_GPIO_Init+0x328>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a58      	ldr	r2, [pc, #352]	; (8001334 <HAL_GPIO_Init+0x32c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d037      	beq.n	8001246 <HAL_GPIO_Init+0x23e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a57      	ldr	r2, [pc, #348]	; (8001338 <HAL_GPIO_Init+0x330>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d031      	beq.n	8001242 <HAL_GPIO_Init+0x23a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a56      	ldr	r2, [pc, #344]	; (800133c <HAL_GPIO_Init+0x334>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d02b      	beq.n	800123e <HAL_GPIO_Init+0x236>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a55      	ldr	r2, [pc, #340]	; (8001340 <HAL_GPIO_Init+0x338>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d025      	beq.n	800123a <HAL_GPIO_Init+0x232>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a54      	ldr	r2, [pc, #336]	; (8001344 <HAL_GPIO_Init+0x33c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d01f      	beq.n	8001236 <HAL_GPIO_Init+0x22e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a53      	ldr	r2, [pc, #332]	; (8001348 <HAL_GPIO_Init+0x340>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x22a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_GPIO_Init+0x344>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x226>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x348>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x222>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x34c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x21e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x350>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x21a>
 800121e:	2309      	movs	r3, #9
 8001220:	e012      	b.n	8001248 <HAL_GPIO_Init+0x240>
 8001222:	230a      	movs	r3, #10
 8001224:	e010      	b.n	8001248 <HAL_GPIO_Init+0x240>
 8001226:	2308      	movs	r3, #8
 8001228:	e00e      	b.n	8001248 <HAL_GPIO_Init+0x240>
 800122a:	2307      	movs	r3, #7
 800122c:	e00c      	b.n	8001248 <HAL_GPIO_Init+0x240>
 800122e:	2306      	movs	r3, #6
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x240>
 8001232:	2305      	movs	r3, #5
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x240>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x240>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x240>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x240>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x240>
 8001246:	2300      	movs	r3, #0
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <HAL_GPIO_Init+0x328>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_GPIO_Init+0x354>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a34      	ldr	r2, [pc, #208]	; (800135c <HAL_GPIO_Init+0x354>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_GPIO_Init+0x354>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a29      	ldr	r2, [pc, #164]	; (800135c <HAL_GPIO_Init+0x354>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <HAL_GPIO_Init+0x354>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_GPIO_Init+0x354>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_GPIO_Init+0x354>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_GPIO_Init+0x354>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	f67f ae84 	bls.w	8001024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40021400 	.word	0x40021400
 800134c:	40021800 	.word	0x40021800
 8001350:	40021c00 	.word	0x40021c00
 8001354:	40022000 	.word	0x40022000
 8001358:	40022400 	.word	0x40022400
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fa4c 	bl	8000880 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e267      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d075      	beq.n	80014fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	d00c      	beq.n	8001438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141e:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d112      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142a:	4b82      	ldr	r3, [pc, #520]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001436:	d10b      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d05b      	beq.n	80014fc <HAL_RCC_OscConfig+0x108>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d157      	bne.n	80014fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e242      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x74>
 800145a:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a75      	ldr	r2, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6f      	ldr	r2, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 800148c:	4b69      	ldr	r3, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a68      	ldr	r2, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc8c 	bl	8000dc8 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fc88 	bl	8000dc8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e207      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xc0>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc78 	bl	8000dc8 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fc74 	bl	8000dc8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1f3      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0xe8>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d063      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1c7      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4937      	ldr	r1, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e03a      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x244>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fc2d 	bl	8000dc8 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fc29 	bl	8000dc8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1a8      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4925      	ldr	r1, [pc, #148]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_RCC_OscConfig+0x244>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fc0c 	bl	8000dc8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc08 	bl	8000dc8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e187      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d036      	beq.n	800164c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d016      	beq.n	8001614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_RCC_OscConfig+0x248>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fbec 	bl	8000dc8 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fbe8 	bl	8000dc8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e167      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x200>
 8001612:	e01b      	b.n	800164c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_OscConfig+0x248>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fbd5 	bl	8000dc8 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	e00e      	b.n	8001640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fbd1 	bl	8000dc8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d907      	bls.n	8001640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e150      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
 8001634:	40023800 	.word	0x40023800
 8001638:	42470000 	.word	0x42470000
 800163c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ea      	bne.n	8001622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8097 	beq.w	8001788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a7c      	ldr	r2, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b77      	ldr	r3, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b74      	ldr	r3, [pc, #464]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a73      	ldr	r2, [pc, #460]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fb91 	bl	8000dc8 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff fb8d 	bl	8000dc8 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e10c      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x2ea>
 80016d0:	4b64      	ldr	r3, [pc, #400]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a63      	ldr	r2, [pc, #396]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x324>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x30c>
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a5e      	ldr	r2, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	4a5b      	ldr	r2, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x324>
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a57      	ldr	r2, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	4b55      	ldr	r3, [pc, #340]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001712:	f023 0304 	bic.w	r3, r3, #4
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fb52 	bl	8000dc8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fb4e 	bl	8000dc8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0cb      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0ee      	beq.n	8001728 <HAL_RCC_OscConfig+0x334>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fb3c 	bl	8000dc8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	e00a      	b.n	800176a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb38 	bl	8000dc8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0b5      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ee      	bne.n	8001754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a38      	ldr	r2, [pc, #224]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a1 	beq.w	80018d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b08      	cmp	r3, #8
 800179c:	d05c      	beq.n	8001858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d141      	bne.n	800182a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x478>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb0c 	bl	8000dc8 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fb08 	bl	8000dc8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e087      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	3b01      	subs	r3, #1
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	491b      	ldr	r1, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x478>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fae1 	bl	8000dc8 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fadd 	bl	8000dc8 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e05c      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x416>
 8001828:	e054      	b.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x478>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff faca 	bl	8000dc8 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fac6 	bl	8000dc8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e045      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x444>
 8001856:	e03d      	b.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d107      	bne.n	8001870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e038      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000
 800186c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x4ec>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d028      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d121      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d11a      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a0:	4013      	ands	r3, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	3b01      	subs	r3, #1
 80018ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0cc      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d90c      	bls.n	8001920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b8      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	494d      	ldr	r1, [pc, #308]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d044      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e067      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4934      	ldr	r1, [pc, #208]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff f9f8 	bl	8000dc8 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff f9f4 	bl	8000dc8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e04f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d20c      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e032      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4916      	ldr	r1, [pc, #88]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f821 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f838 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08005b98 	.word	0x08005b98
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b090      	sub	sp, #64	; 0x40
 8001ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
 8001abc:	2300      	movs	r3, #0
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d00d      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	f200 80a1 	bhi.w	8001c1c <HAL_RCC_GetSysClockFreq+0x16c>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae2:	e09b      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ae8:	e09b      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aea:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aee:	e098      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af0:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afa:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d028      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	627a      	str	r2, [r7, #36]	; 0x24
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b1c:	fb03 f201 	mul.w	r2, r3, r1
 8001b20:	2300      	movs	r3, #0
 8001b22:	fb00 f303 	mul.w	r3, r0, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b2a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b30:	460a      	mov	r2, r1
 8001b32:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b36:	4413      	add	r3, r2
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	61fa      	str	r2, [r7, #28]
 8001b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b4a:	f7fe fb51 	bl	80001f0 <__aeabi_uldivmod>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4613      	mov	r3, r2
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b56:	e053      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	2200      	movs	r2, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	617a      	str	r2, [r7, #20]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b6a:	f04f 0b00 	mov.w	fp, #0
 8001b6e:	4652      	mov	r2, sl
 8001b70:	465b      	mov	r3, fp
 8001b72:	f04f 0000 	mov.w	r0, #0
 8001b76:	f04f 0100 	mov.w	r1, #0
 8001b7a:	0159      	lsls	r1, r3, #5
 8001b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b80:	0150      	lsls	r0, r2, #5
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	ebb2 080a 	subs.w	r8, r2, sl
 8001b8a:	eb63 090b 	sbc.w	r9, r3, fp
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ba2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ba6:	eb63 0509 	sbc.w	r5, r3, r9
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	00eb      	lsls	r3, r5, #3
 8001bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb8:	00e2      	lsls	r2, r4, #3
 8001bba:	4614      	mov	r4, r2
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	eb14 030a 	adds.w	r3, r4, sl
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	eb45 030b 	adc.w	r3, r5, fp
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	028b      	lsls	r3, r1, #10
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be0:	4621      	mov	r1, r4
 8001be2:	028a      	lsls	r2, r1, #10
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bea:	2200      	movs	r2, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	60fa      	str	r2, [r7, #12]
 8001bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf4:	f7fe fafc 	bl	80001f0 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3740      	adds	r7, #64	; 0x40
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	017d7840 	.word	0x017d7840

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08005ba8 	.word	0x08005ba8

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffdc 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0b5b      	lsrs	r3, r3, #13
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08005ba8 	.word	0x08005ba8

08001ca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_RCC_GetClockConfig+0x60>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e041      	b.n	8001d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f839 	bl	8001da6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f000 f9d8 	bl	80020fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d001      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e04e      	b.n	8001e72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_TIM_Base_Start_IT+0xc4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d022      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d01d      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d018      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00e      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d111      	bne.n	8001e60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d010      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5e:	e007      	b.n	8001e70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40010400 	.word	0x40010400
 8001e94:	40014000 	.word	0x40014000
 8001e98:	40001800 	.word	0x40001800

08001e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0202 	mvn.w	r2, #2
 8001ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8ee 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8e0 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8f1 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0204 	mvn.w	r2, #4
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2202      	movs	r2, #2
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8c4 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8b6 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8c7 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0208 	mvn.w	r2, #8
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f89a 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f88c 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f89d 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0210 	mvn.w	r2, #16
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f870 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f862 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f873 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0201 	mvn.w	r2, #1
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fd2c 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d10e      	bne.n	800204c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d107      	bne.n	800204c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f902 	bl	8002250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d107      	bne.n	8002078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f838 	bl	80020e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b20      	cmp	r3, #32
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0220 	mvn.w	r2, #32
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8cc 	bl	800223c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <TIM_Base_SetConfig+0x114>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211a:	d00f      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3d      	ldr	r2, [pc, #244]	; (8002214 <TIM_Base_SetConfig+0x118>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00b      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3c      	ldr	r2, [pc, #240]	; (8002218 <TIM_Base_SetConfig+0x11c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3b      	ldr	r2, [pc, #236]	; (800221c <TIM_Base_SetConfig+0x120>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d003      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <TIM_Base_SetConfig+0x124>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d108      	bne.n	800214e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <TIM_Base_SetConfig+0x114>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d02b      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d027      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <TIM_Base_SetConfig+0x118>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d023      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2b      	ldr	r2, [pc, #172]	; (8002218 <TIM_Base_SetConfig+0x11c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <TIM_Base_SetConfig+0x120>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01b      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <TIM_Base_SetConfig+0x124>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d017      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <TIM_Base_SetConfig+0x128>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <TIM_Base_SetConfig+0x12c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00f      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <TIM_Base_SetConfig+0x130>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00b      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <TIM_Base_SetConfig+0x134>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <TIM_Base_SetConfig+0x138>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d003      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a23      	ldr	r2, [pc, #140]	; (8002238 <TIM_Base_SetConfig+0x13c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d108      	bne.n	80021c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <TIM_Base_SetConfig+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_Base_SetConfig+0xf8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <TIM_Base_SetConfig+0x124>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d103      	bne.n	80021fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	615a      	str	r2, [r3, #20]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40010400 	.word	0x40010400
 8002224:	40014000 	.word	0x40014000
 8002228:	40014400 	.word	0x40014400
 800222c:	40014800 	.word	0x40014800
 8002230:	40001800 	.word	0x40001800
 8002234:	40001c00 	.word	0x40001c00
 8002238:	40002000 	.word	0x40002000

0800223c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e03f      	b.n	80022f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fcf4 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f939 	bl	8002520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af02      	add	r7, sp, #8
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b20      	cmp	r3, #32
 800231c:	f040 808c 	bne.w	8002438 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_UART_Receive+0x2e>
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e084      	b.n	800243a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_UART_Receive+0x40>
 800233a:	2302      	movs	r3, #2
 800233c:	e07d      	b.n	800243a <HAL_UART_Receive+0x13c>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2222      	movs	r2, #34	; 0x22
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800235a:	f7fe fd35 	bl	8000dc8 <HAL_GetTick>
 800235e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002374:	d108      	bne.n	8002388 <HAL_UART_Receive+0x8a>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d104      	bne.n	8002388 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	e003      	b.n	8002390 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002398:	e043      	b.n	8002422 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2120      	movs	r1, #32
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f84c 	bl	8002442 <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e042      	b.n	800243a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	3302      	adds	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e01f      	b.n	8002414 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	d007      	beq.n	80023ee <HAL_UART_Receive+0xf0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <HAL_UART_Receive+0xfe>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e008      	b.n	800240e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002408:	b2da      	uxtb	r2, r3
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1b6      	bne.n	800239a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b090      	sub	sp, #64	; 0x40
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002452:	e050      	b.n	80024f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d04c      	beq.n	80024f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800245c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <UART_WaitOnFlagUntilTimeout+0x30>
 8002462:	f7fe fcb1 	bl	8000dc8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800246e:	429a      	cmp	r2, r3
 8002470:	d241      	bcs.n	80024f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	330c      	adds	r3, #12
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	e853 3f00 	ldrex	r3, [r3]
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002492:	637a      	str	r2, [r7, #52]	; 0x34
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800249a:	e841 2300 	strex	r3, r2, [r1]
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1e5      	bne.n	8002472 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3314      	adds	r3, #20
 80024ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	613b      	str	r3, [r7, #16]
   return(result);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3314      	adds	r3, #20
 80024c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c6:	623a      	str	r2, [r7, #32]
 80024c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	69f9      	ldr	r1, [r7, #28]
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	e841 2300 	strex	r3, r2, [r1]
 80024d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e5      	bne.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e00f      	b.n	8002516 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4013      	ands	r3, r2
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	429a      	cmp	r2, r3
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	429a      	cmp	r2, r3
 8002512:	d09f      	beq.n	8002454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3740      	adds	r7, #64	; 0x40
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002524:	b0c0      	sub	sp, #256	; 0x100
 8002526:	af00      	add	r7, sp, #0
 8002528:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253c:	68d9      	ldr	r1, [r3, #12]
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	ea40 0301 	orr.w	r3, r0, r1
 8002548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	431a      	orrs	r2, r3
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002578:	f021 010c 	bic.w	r1, r1, #12
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002586:	430b      	orrs	r3, r1
 8002588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800258a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259a:	6999      	ldr	r1, [r3, #24]
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	ea40 0301 	orr.w	r3, r0, r1
 80025a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <UART_SetConfig+0x2cc>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d005      	beq.n	80025c0 <UART_SetConfig+0xa0>
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b8d      	ldr	r3, [pc, #564]	; (80027f0 <UART_SetConfig+0x2d0>)
 80025bc:	429a      	cmp	r2, r3
 80025be:	d104      	bne.n	80025ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025c0:	f7ff fb5c 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 80025c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025c8:	e003      	b.n	80025d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fb43 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 80025ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025dc:	f040 810c 	bne.w	80027f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	1891      	adds	r1, r2, r2
 80025f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80025fa:	415b      	adcs	r3, r3
 80025fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002602:	4621      	mov	r1, r4
 8002604:	eb12 0801 	adds.w	r8, r2, r1
 8002608:	4629      	mov	r1, r5
 800260a:	eb43 0901 	adc.w	r9, r3, r1
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800261a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002622:	4690      	mov	r8, r2
 8002624:	4699      	mov	r9, r3
 8002626:	4623      	mov	r3, r4
 8002628:	eb18 0303 	adds.w	r3, r8, r3
 800262c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002630:	462b      	mov	r3, r5
 8002632:	eb49 0303 	adc.w	r3, r9, r3
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002646:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800264a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800264e:	460b      	mov	r3, r1
 8002650:	18db      	adds	r3, r3, r3
 8002652:	653b      	str	r3, [r7, #80]	; 0x50
 8002654:	4613      	mov	r3, r2
 8002656:	eb42 0303 	adc.w	r3, r2, r3
 800265a:	657b      	str	r3, [r7, #84]	; 0x54
 800265c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002664:	f7fd fdc4 	bl	80001f0 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <UART_SetConfig+0x2d4>)
 800266e:	fba3 2302 	umull	r2, r3, r3, r2
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	011c      	lsls	r4, r3, #4
 8002676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002680:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002688:	4642      	mov	r2, r8
 800268a:	464b      	mov	r3, r9
 800268c:	1891      	adds	r1, r2, r2
 800268e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002690:	415b      	adcs	r3, r3
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002698:	4641      	mov	r1, r8
 800269a:	eb12 0a01 	adds.w	sl, r2, r1
 800269e:	4649      	mov	r1, r9
 80026a0:	eb43 0b01 	adc.w	fp, r3, r1
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b8:	4692      	mov	sl, r2
 80026ba:	469b      	mov	fp, r3
 80026bc:	4643      	mov	r3, r8
 80026be:	eb1a 0303 	adds.w	r3, sl, r3
 80026c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026c6:	464b      	mov	r3, r9
 80026c8:	eb4b 0303 	adc.w	r3, fp, r3
 80026cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026e4:	460b      	mov	r3, r1
 80026e6:	18db      	adds	r3, r3, r3
 80026e8:	643b      	str	r3, [r7, #64]	; 0x40
 80026ea:	4613      	mov	r3, r2
 80026ec:	eb42 0303 	adc.w	r3, r2, r3
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
 80026f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026fa:	f7fd fd79 	bl	80001f0 <__aeabi_uldivmod>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4611      	mov	r1, r2
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <UART_SetConfig+0x2d4>)
 8002706:	fba3 2301 	umull	r2, r3, r3, r1
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2264      	movs	r2, #100	; 0x64
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	1acb      	subs	r3, r1, r3
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <UART_SetConfig+0x2d4>)
 800271c:	fba3 2302 	umull	r2, r3, r3, r2
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002728:	441c      	add	r4, r3
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272e:	2200      	movs	r2, #0
 8002730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002734:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800273c:	4642      	mov	r2, r8
 800273e:	464b      	mov	r3, r9
 8002740:	1891      	adds	r1, r2, r2
 8002742:	63b9      	str	r1, [r7, #56]	; 0x38
 8002744:	415b      	adcs	r3, r3
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800274c:	4641      	mov	r1, r8
 800274e:	1851      	adds	r1, r2, r1
 8002750:	6339      	str	r1, [r7, #48]	; 0x30
 8002752:	4649      	mov	r1, r9
 8002754:	414b      	adcs	r3, r1
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002764:	4659      	mov	r1, fp
 8002766:	00cb      	lsls	r3, r1, #3
 8002768:	4651      	mov	r1, sl
 800276a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276e:	4651      	mov	r1, sl
 8002770:	00ca      	lsls	r2, r1, #3
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	4603      	mov	r3, r0
 8002778:	4642      	mov	r2, r8
 800277a:	189b      	adds	r3, r3, r2
 800277c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002780:	464b      	mov	r3, r9
 8002782:	460a      	mov	r2, r1
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002798:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800279c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027a0:	460b      	mov	r3, r1
 80027a2:	18db      	adds	r3, r3, r3
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a6:	4613      	mov	r3, r2
 80027a8:	eb42 0303 	adc.w	r3, r2, r3
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027b6:	f7fd fd1b 	bl	80001f0 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <UART_SetConfig+0x2d4>)
 80027c0:	fba3 1302 	umull	r1, r3, r3, r2
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	2164      	movs	r1, #100	; 0x64
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	3332      	adds	r3, #50	; 0x32
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <UART_SetConfig+0x2d4>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	f003 0207 	and.w	r2, r3, #7
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4422      	add	r2, r4
 80027e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027e8:	e105      	b.n	80029f6 <UART_SetConfig+0x4d6>
 80027ea:	bf00      	nop
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40011400 	.word	0x40011400
 80027f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002802:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800280a:	4642      	mov	r2, r8
 800280c:	464b      	mov	r3, r9
 800280e:	1891      	adds	r1, r2, r2
 8002810:	6239      	str	r1, [r7, #32]
 8002812:	415b      	adcs	r3, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800281a:	4641      	mov	r1, r8
 800281c:	1854      	adds	r4, r2, r1
 800281e:	4649      	mov	r1, r9
 8002820:	eb43 0501 	adc.w	r5, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	00eb      	lsls	r3, r5, #3
 800282e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002832:	00e2      	lsls	r2, r4, #3
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	4643      	mov	r3, r8
 800283a:	18e3      	adds	r3, r4, r3
 800283c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002840:	464b      	mov	r3, r9
 8002842:	eb45 0303 	adc.w	r3, r5, r3
 8002846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002856:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002866:	4629      	mov	r1, r5
 8002868:	008b      	lsls	r3, r1, #2
 800286a:	4621      	mov	r1, r4
 800286c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002870:	4621      	mov	r1, r4
 8002872:	008a      	lsls	r2, r1, #2
 8002874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002878:	f7fd fcba 	bl	80001f0 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <UART_SetConfig+0x4e4>)
 8002882:	fba3 2302 	umull	r2, r3, r3, r2
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	011c      	lsls	r4, r3, #4
 800288a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800288e:	2200      	movs	r2, #0
 8002890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002894:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800289c:	4642      	mov	r2, r8
 800289e:	464b      	mov	r3, r9
 80028a0:	1891      	adds	r1, r2, r2
 80028a2:	61b9      	str	r1, [r7, #24]
 80028a4:	415b      	adcs	r3, r3
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ac:	4641      	mov	r1, r8
 80028ae:	1851      	adds	r1, r2, r1
 80028b0:	6139      	str	r1, [r7, #16]
 80028b2:	4649      	mov	r1, r9
 80028b4:	414b      	adcs	r3, r1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c4:	4659      	mov	r1, fp
 80028c6:	00cb      	lsls	r3, r1, #3
 80028c8:	4651      	mov	r1, sl
 80028ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ce:	4651      	mov	r1, sl
 80028d0:	00ca      	lsls	r2, r1, #3
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	4642      	mov	r2, r8
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028e0:	464b      	mov	r3, r9
 80028e2:	460a      	mov	r2, r1
 80028e4:	eb42 0303 	adc.w	r3, r2, r3
 80028e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002904:	4649      	mov	r1, r9
 8002906:	008b      	lsls	r3, r1, #2
 8002908:	4641      	mov	r1, r8
 800290a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800290e:	4641      	mov	r1, r8
 8002910:	008a      	lsls	r2, r1, #2
 8002912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002916:	f7fd fc6b 	bl	80001f0 <__aeabi_uldivmod>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <UART_SetConfig+0x4e4>)
 8002920:	fba3 1302 	umull	r1, r3, r3, r2
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	2164      	movs	r1, #100	; 0x64
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	3332      	adds	r3, #50	; 0x32
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <UART_SetConfig+0x4e4>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293e:	441c      	add	r4, r3
 8002940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002944:	2200      	movs	r2, #0
 8002946:	673b      	str	r3, [r7, #112]	; 0x70
 8002948:	677a      	str	r2, [r7, #116]	; 0x74
 800294a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800294e:	4642      	mov	r2, r8
 8002950:	464b      	mov	r3, r9
 8002952:	1891      	adds	r1, r2, r2
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	415b      	adcs	r3, r3
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800295e:	4641      	mov	r1, r8
 8002960:	1851      	adds	r1, r2, r1
 8002962:	6039      	str	r1, [r7, #0]
 8002964:	4649      	mov	r1, r9
 8002966:	414b      	adcs	r3, r1
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002976:	4659      	mov	r1, fp
 8002978:	00cb      	lsls	r3, r1, #3
 800297a:	4651      	mov	r1, sl
 800297c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002980:	4651      	mov	r1, sl
 8002982:	00ca      	lsls	r2, r1, #3
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	4603      	mov	r3, r0
 800298a:	4642      	mov	r2, r8
 800298c:	189b      	adds	r3, r3, r2
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002990:	464b      	mov	r3, r9
 8002992:	460a      	mov	r2, r1
 8002994:	eb42 0303 	adc.w	r3, r2, r3
 8002998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	663b      	str	r3, [r7, #96]	; 0x60
 80029a4:	667a      	str	r2, [r7, #100]	; 0x64
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029b2:	4649      	mov	r1, r9
 80029b4:	008b      	lsls	r3, r1, #2
 80029b6:	4641      	mov	r1, r8
 80029b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029bc:	4641      	mov	r1, r8
 80029be:	008a      	lsls	r2, r1, #2
 80029c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029c4:	f7fd fc14 	bl	80001f0 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <UART_SetConfig+0x4e4>)
 80029ce:	fba3 1302 	umull	r1, r3, r3, r2
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2164      	movs	r1, #100	; 0x64
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	3332      	adds	r3, #50	; 0x32
 80029e0:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <UART_SetConfig+0x4e4>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4422      	add	r2, r4
 80029f4:	609a      	str	r2, [r3, #8]
}
 80029f6:	bf00      	nop
 80029f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029fc:	46bd      	mov	sp, r7
 80029fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a02:	bf00      	nop
 8002a04:	51eb851f 	.word	0x51eb851f

08002a08 <__NVIC_SetPriority>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Handler+0x1c>)
 8002a62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a64:	f001 fea0 	bl	80047a8 <xTaskGetSchedulerState>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d001      	beq.n	8002a72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a6e:	f002 fc8b 	bl	8005388 <xPortSysTickHandler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a80:	2100      	movs	r1, #0
 8002a82:	f06f 0004 	mvn.w	r0, #4
 8002a86:	f7ff ffbf 	bl	8002a08 <__NVIC_SetPriority>
#endif
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a96:	f3ef 8305 	mrs	r3, IPSR
 8002a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002aa2:	f06f 0305 	mvn.w	r3, #5
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	e00c      	b.n	8002ac4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <osKernelInitialize+0x44>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <osKernelInitialize+0x44>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	e002      	b.n	8002ac4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000148 	.word	0x20000148

08002ad8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ade:	f3ef 8305 	mrs	r3, IPSR
 8002ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002aea:	f06f 0305 	mvn.w	r3, #5
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	e010      	b.n	8002b14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <osKernelStart+0x48>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d109      	bne.n	8002b0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002afa:	f7ff ffbf 	bl	8002a7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <osKernelStart+0x48>)
 8002b00:	2202      	movs	r2, #2
 8002b02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b04:	f001 f9f4 	bl	8003ef0 <vTaskStartScheduler>
      stat = osOK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	e002      	b.n	8002b14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b14:	687b      	ldr	r3, [r7, #4]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000148 	.word	0x20000148

08002b24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af04      	add	r7, sp, #16
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b34:	f3ef 8305 	mrs	r3, IPSR
 8002b38:	617b      	str	r3, [r7, #20]
  return(result);
 8002b3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d17e      	bne.n	8002c3e <osThreadNew+0x11a>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d07b      	beq.n	8002c3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b4a:	2318      	movs	r3, #24
 8002b4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d045      	beq.n	8002bea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <osThreadNew+0x48>
        name = attr->name;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <osThreadNew+0x6e>
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b38      	cmp	r3, #56	; 0x38
 8002b84:	d805      	bhi.n	8002b92 <osThreadNew+0x6e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <osThreadNew+0x72>
        return (NULL);
 8002b92:	2300      	movs	r3, #0
 8002b94:	e054      	b.n	8002c40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <osThreadNew+0xa8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2bbb      	cmp	r3, #187	; 0xbb
 8002bb4:	d90a      	bls.n	8002bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <osThreadNew+0xa8>
        mem = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	e010      	b.n	8002bee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10c      	bne.n	8002bee <osThreadNew+0xca>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d108      	bne.n	8002bee <osThreadNew+0xca>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <osThreadNew+0xca>
          mem = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e001      	b.n	8002bee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d110      	bne.n	8002c16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bfc:	9202      	str	r2, [sp, #8]
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fe0c 	bl	8003828 <xTaskCreateStatic>
 8002c10:	4603      	mov	r3, r0
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	e013      	b.n	8002c3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d110      	bne.n	8002c3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fe57 	bl	80038e2 <xTaskCreate>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <osThreadNew+0x11a>
            hTask = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c3e:	693b      	ldr	r3, [r7, #16]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	; 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c50:	f3ef 8305 	mrs	r3, IPSR
 8002c54:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <osDelay+0x1c>
    stat = osErrorISR;
 8002c5c:	f06f 0305 	mvn.w	r3, #5
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e007      	b.n	8002c74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 ff92 	bl	8003b98 <vTaskDelay>
    }
  }

  return (stat);
 8002c74:	68fb      	ldr	r3, [r7, #12]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <vApplicationGetIdleTaskMemory+0x2c>)
 8002c90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <vApplicationGetIdleTaskMemory+0x30>)
 8002c96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	601a      	str	r2, [r3, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	2000014c 	.word	0x2000014c
 8002cb0:	20000208 	.word	0x20000208

08002cb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4a06      	ldr	r2, [pc, #24]	; (8002ce4 <vApplicationGetTimerTaskMemory+0x30>)
 8002cca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	20000408 	.word	0x20000408
 8002ce4:	200004c4 	.word	0x200004c4

08002ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f103 0208 	add.w	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0208 	add.w	r2, r3, #8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f103 0208 	add.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d103      	bne.n	8002daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e00c      	b.n	8002dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3308      	adds	r3, #8
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e002      	b.n	8002db8 <vListInsert+0x2e>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d2f6      	bcs.n	8002db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6852      	ldr	r2, [r2, #4]
 8002e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d103      	bne.n	8002e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1e5a      	subs	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e7a:	f002 f9f3 	bl	8005264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	441a      	add	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d114      	bne.n	8002efa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01a      	beq.n	8002f0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3310      	adds	r3, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 faa1 	bl	8004424 <xTaskRemoveFromEventList>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <xQueueGenericReset+0xcc>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	e009      	b.n	8002f0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3310      	adds	r3, #16
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fef2 	bl	8002ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff feed 	bl	8002ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f0e:	f002 f9d9 	bl	80052c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	; 0x38
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <xQueueGenericCreateStatic+0x52>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <xQueueGenericCreateStatic+0x56>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <xQueueGenericCreateStatic+0x58>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	623b      	str	r3, [r7, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <xQueueGenericCreateStatic+0x7e>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <xQueueGenericCreateStatic+0x82>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueGenericCreateStatic+0x84>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	61fb      	str	r3, [r7, #28]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fbe:	2350      	movs	r3, #80	; 0x50
 8002fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b50      	cmp	r3, #80	; 0x50
 8002fc6:	d00a      	beq.n	8002fde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61bb      	str	r3, [r7, #24]
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f805 	bl	8003010 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003008:	4618      	mov	r0, r3
 800300a:	3730      	adds	r7, #48	; 0x30
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e002      	b.n	8003032 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800303e:	2101      	movs	r1, #1
 8003040:	69b8      	ldr	r0, [r7, #24]
 8003042:	f7ff ff05 	bl	8002e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	; 0x38
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003066:	2300      	movs	r3, #0
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xQueueGenericSend+0x32>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <xQueueGenericSend+0x40>
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <xQueueGenericSend+0x44>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <xQueueGenericSend+0x46>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <xQueueGenericSend+0x60>
	__asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030b4:	bf00      	nop
 80030b6:	e7fe      	b.n	80030b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d103      	bne.n	80030c6 <xQueueGenericSend+0x6e>
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <xQueueGenericSend+0x72>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <xQueueGenericSend+0x74>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	623b      	str	r3, [r7, #32]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030e6:	f001 fb5f 	bl	80047a8 <xTaskGetSchedulerState>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <xQueueGenericSend+0x9e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <xQueueGenericSend+0xa2>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <xQueueGenericSend+0xa4>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueGenericSend+0xbe>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	61fb      	str	r3, [r7, #28]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003116:	f002 f8a5 	bl	8005264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <xQueueGenericSend+0xd4>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d129      	bne.n	8003180 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003132:	f000 fa0b 	bl	800354c <prvCopyDataToQueue>
 8003136:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	3324      	adds	r3, #36	; 0x24
 8003144:	4618      	mov	r0, r3
 8003146:	f001 f96d 	bl	8004424 <xTaskRemoveFromEventList>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003150:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <xQueueGenericSend+0x1f8>)
 8003152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	e00a      	b.n	8003178 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <xQueueGenericSend+0x1f8>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003178:	f002 f8a4 	bl	80052c4 <vPortExitCritical>
				return pdPASS;
 800317c:	2301      	movs	r3, #1
 800317e:	e063      	b.n	8003248 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003186:	f002 f89d 	bl	80052c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800318a:	2300      	movs	r3, #0
 800318c:	e05c      	b.n	8003248 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4618      	mov	r0, r3
 800319a:	f001 f9a7 	bl	80044ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031a2:	f002 f88f 	bl	80052c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031a6:	f000 ff13 	bl	8003fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031aa:	f002 f85b 	bl	8005264 <vPortEnterCritical>
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d103      	bne.n	80031c4 <xQueueGenericSend+0x16c>
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ca:	b25b      	sxtb	r3, r3
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d103      	bne.n	80031da <xQueueGenericSend+0x182>
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031da:	f002 f873 	bl	80052c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 f996 	bl	8004518 <xTaskCheckForTimeOut>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d124      	bne.n	800323c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f4:	f000 faa2 	bl	800373c <prvIsQueueFull>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d018      	beq.n	8003230 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	3310      	adds	r3, #16
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f8bc 	bl	8004384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800320c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800320e:	f000 fa2d 	bl	800366c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003212:	f000 feeb 	bl	8003fec <xTaskResumeAll>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	f47f af7c 	bne.w	8003116 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <xQueueGenericSend+0x1f8>)
 8003220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	e772      	b.n	8003116 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003232:	f000 fa1b 	bl	800366c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003236:	f000 fed9 	bl	8003fec <xTaskResumeAll>
 800323a:	e76c      	b.n	8003116 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800323c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323e:	f000 fa15 	bl	800366c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003242:	f000 fed3 	bl	8003fec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003246:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003248:	4618      	mov	r0, r3
 800324a:	3738      	adds	r7, #56	; 0x38
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b090      	sub	sp, #64	; 0x40
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <xQueueGenericSendFromISR+0x3c>
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <xQueueGenericSendFromISR+0x40>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <xQueueGenericSendFromISR+0x42>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <xQueueGenericSendFromISR+0x6a>
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <xQueueGenericSendFromISR+0x6e>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueGenericSendFromISR+0x70>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	623b      	str	r3, [r7, #32]
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032de:	f002 f8a3 	bl	8005428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032e2:	f3ef 8211 	mrs	r2, BASEPRI
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	61fa      	str	r2, [r7, #28]
 80032f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <xQueueGenericSendFromISR+0xbc>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d12f      	bne.n	8003370 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003326:	f000 f911 	bl	800354c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800332a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d112      	bne.n	800335a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	4618      	mov	r0, r3
 8003342:	f001 f86f 	bl	8004424 <xTaskRemoveFromEventList>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00e      	beq.n	800336a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e007      	b.n	800336a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800335a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800335e:	3301      	adds	r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	b25a      	sxtb	r2, r3
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800336a:	2301      	movs	r3, #1
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800336e:	e001      	b.n	8003374 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003370:	2300      	movs	r3, #0
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003376:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800337e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003382:	4618      	mov	r0, r3
 8003384:	3740      	adds	r7, #64	; 0x40
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	; 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <xQueueReceive+0x30>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	623b      	str	r3, [r7, #32]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <xQueueReceive+0x3e>
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <xQueueReceive+0x42>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xQueueReceive+0x44>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xQueueReceive+0x5e>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61fb      	str	r3, [r7, #28]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ea:	f001 f9dd 	bl	80047a8 <xTaskGetSchedulerState>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <xQueueReceive+0x6e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <xQueueReceive+0x72>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueReceive+0x74>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xQueueReceive+0x8e>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	61bb      	str	r3, [r7, #24]
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800341a:	f001 ff23 	bl	8005264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01f      	beq.n	800346a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342e:	f000 f8f7 	bl	8003620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	3310      	adds	r3, #16
 8003446:	4618      	mov	r0, r3
 8003448:	f000 ffec 	bl	8004424 <xTaskRemoveFromEventList>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <xQueueReceive+0x1bc>)
 8003454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003462:	f001 ff2f 	bl	80052c4 <vPortExitCritical>
				return pdPASS;
 8003466:	2301      	movs	r3, #1
 8003468:	e069      	b.n	800353e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d103      	bne.n	8003478 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003470:	f001 ff28 	bl	80052c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003474:	2300      	movs	r3, #0
 8003476:	e062      	b.n	800353e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f832 	bl	80044ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800348c:	f001 ff1a 	bl	80052c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003490:	f000 fd9e 	bl	8003fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003494:	f001 fee6 	bl	8005264 <vPortEnterCritical>
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d103      	bne.n	80034ae <xQueueReceive+0x122>
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d103      	bne.n	80034c4 <xQueueReceive+0x138>
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c4:	f001 fefe 	bl	80052c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034c8:	1d3a      	adds	r2, r7, #4
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 f821 	bl	8004518 <xTaskCheckForTimeOut>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d123      	bne.n	8003524 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034de:	f000 f917 	bl	8003710 <prvIsQueueEmpty>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 ff47 	bl	8004384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034f8:	f000 f8b8 	bl	800366c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034fc:	f000 fd76 	bl	8003fec <xTaskResumeAll>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d189      	bne.n	800341a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <xQueueReceive+0x1bc>)
 8003508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	e780      	b.n	800341a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351a:	f000 f8a7 	bl	800366c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800351e:	f000 fd65 	bl	8003fec <xTaskResumeAll>
 8003522:	e77a      	b.n	800341a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003526:	f000 f8a1 	bl	800366c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800352a:	f000 fd5f 	bl	8003fec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800352e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003530:	f000 f8ee 	bl	8003710 <prvIsQueueEmpty>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f43f af6f 	beq.w	800341a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800353c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800353e:	4618      	mov	r0, r3
 8003540:	3730      	adds	r7, #48	; 0x30
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d14d      	bne.n	800360e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f934 	bl	80047e4 <xTaskPriorityDisinherit>
 800357c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	e043      	b.n	800360e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d119      	bne.n	80035c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6858      	ldr	r0, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	461a      	mov	r2, r3
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	f002 f996 	bl	80058c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	441a      	add	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d32b      	bcc.n	800360e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	e026      	b.n	800360e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68d8      	ldr	r0, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	461a      	mov	r2, r3
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	f002 f97c 	bl	80058c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	425b      	negs	r3, r3
 80035da:	441a      	add	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d207      	bcs.n	80035fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	425b      	negs	r3, r3
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d105      	bne.n	800360e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	3b01      	subs	r3, #1
 800360c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003616:	697b      	ldr	r3, [r7, #20]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d018      	beq.n	8003664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	429a      	cmp	r2, r3
 800364a:	d303      	bcc.n	8003654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	461a      	mov	r2, r3
 800365e:	6838      	ldr	r0, [r7, #0]
 8003660:	f002 f932 	bl	80058c8 <memcpy>
	}
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003674:	f001 fdf6 	bl	8005264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003680:	e011      	b.n	80036a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3324      	adds	r3, #36	; 0x24
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fec8 	bl	8004424 <xTaskRemoveFromEventList>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800369a:	f000 ff9f 	bl	80045dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	dce9      	bgt.n	8003682 <prvUnlockQueue+0x16>
 80036ae:	e000      	b.n	80036b2 <prvUnlockQueue+0x46>
					break;
 80036b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036ba:	f001 fe03 	bl	80052c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036be:	f001 fdd1 	bl	8005264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036ca:	e011      	b.n	80036f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3310      	adds	r3, #16
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fea3 	bl	8004424 <xTaskRemoveFromEventList>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036e4:	f000 ff7a 	bl	80045dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036e8:	7bbb      	ldrb	r3, [r7, #14]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dce9      	bgt.n	80036cc <prvUnlockQueue+0x60>
 80036f8:	e000      	b.n	80036fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003704:	f001 fdde 	bl	80052c4 <vPortExitCritical>
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003718:	f001 fda4 	bl	8005264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e001      	b.n	800372e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800372e:	f001 fdc9 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003744:	f001 fd8e 	bl	8005264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	429a      	cmp	r2, r3
 8003752:	d102      	bne.n	800375a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e001      	b.n	800375e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800375e:	f001 fdb1 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e014      	b.n	80037a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800377c:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <vQueueAddToRegistry+0x50>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003788:	490c      	ldr	r1, [pc, #48]	; (80037bc <vQueueAddToRegistry+0x50>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <vQueueAddToRegistry+0x50>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800379e:	e006      	b.n	80037ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d9e7      	bls.n	800377c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200008c4 	.word	0x200008c4

080037c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037d0:	f001 fd48 	bl	8005264 <vPortEnterCritical>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d103      	bne.n	80037ea <vQueueWaitForMessageRestricted+0x2a>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f0:	b25b      	sxtb	r3, r3
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d103      	bne.n	8003800 <vQueueWaitForMessageRestricted+0x40>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003800:	f001 fd60 	bl	80052c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3324      	adds	r3, #36	; 0x24
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fdd9 	bl	80043cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800381a:	6978      	ldr	r0, [r7, #20]
 800381c:	f7ff ff26 	bl	800366c <prvUnlockQueue>
	}
 8003820:	bf00      	nop
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	; 0x38
 800382c:	af04      	add	r7, sp, #16
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xTaskCreateStatic+0x2a>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	623b      	str	r3, [r7, #32]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xTaskCreateStatic+0x46>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61fb      	str	r3, [r7, #28]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800386e:	23bc      	movs	r3, #188	; 0xbc
 8003870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2bbc      	cmp	r3, #188	; 0xbc
 8003876:	d00a      	beq.n	800388e <xTaskCreateStatic+0x66>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	61bb      	str	r3, [r7, #24]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800388e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01e      	beq.n	80038d4 <xTaskCreateStatic+0xac>
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01b      	beq.n	80038d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038ae:	2300      	movs	r3, #0
 80038b0:	9303      	str	r3, [sp, #12]
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	f107 0314 	add.w	r3, r7, #20
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f850 	bl	800396c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ce:	f000 f8f3 	bl	8003ab8 <prvAddNewTaskToReadyList>
 80038d2:	e001      	b.n	80038d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038d8:	697b      	ldr	r3, [r7, #20]
	}
 80038da:	4618      	mov	r0, r3
 80038dc:	3728      	adds	r7, #40	; 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b08c      	sub	sp, #48	; 0x30
 80038e6:	af04      	add	r7, sp, #16
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fdd6 	bl	80054a8 <pvPortMalloc>
 80038fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003904:	20bc      	movs	r0, #188	; 0xbc
 8003906:	f001 fdcf 	bl	80054a8 <pvPortMalloc>
 800390a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
 8003918:	e005      	b.n	8003926 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800391a:	6978      	ldr	r0, [r7, #20]
 800391c:	f001 fe90 	bl	8005640 <vPortFree>
 8003920:	e001      	b.n	8003926 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d017      	beq.n	800395c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003934:	88fa      	ldrh	r2, [r7, #6]
 8003936:	2300      	movs	r3, #0
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	9302      	str	r3, [sp, #8]
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f80e 	bl	800396c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003950:	69f8      	ldr	r0, [r7, #28]
 8003952:	f000 f8b1 	bl	8003ab8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003956:	2301      	movs	r3, #1
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e002      	b.n	8003962 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003962:	69bb      	ldr	r3, [r7, #24]
	}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	461a      	mov	r2, r3
 8003984:	21a5      	movs	r1, #165	; 0xa5
 8003986:	f001 ffad 	bl	80058e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003994:	3b01      	subs	r3, #1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f023 0307 	bic.w	r3, r3, #7
 80039a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	617b      	str	r3, [r7, #20]
}
 80039c0:	bf00      	nop
 80039c2:	e7fe      	b.n	80039c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01f      	beq.n	8003a0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	e012      	b.n	80039f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	7819      	ldrb	r1, [r3, #0]
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	3334      	adds	r3, #52	; 0x34
 80039e0:	460a      	mov	r2, r1
 80039e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d006      	beq.n	80039fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2b0f      	cmp	r3, #15
 80039fa:	d9e9      	bls.n	80039d0 <prvInitialiseNewTask+0x64>
 80039fc:	e000      	b.n	8003a00 <prvInitialiseNewTask+0x94>
			{
				break;
 80039fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a08:	e003      	b.n	8003a12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	2b37      	cmp	r3, #55	; 0x37
 8003a16:	d901      	bls.n	8003a1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a18:	2337      	movs	r3, #55	; 0x37
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	3304      	adds	r3, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f978 	bl	8002d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	3318      	adds	r3, #24
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff f973 	bl	8002d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	3354      	adds	r3, #84	; 0x54
 8003a6c:	2260      	movs	r2, #96	; 0x60
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 ff37 	bl	80058e4 <memset>
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <prvInitialiseNewTask+0x140>)
 8003a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <prvInitialiseNewTask+0x144>)
 8003a80:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <prvInitialiseNewTask+0x148>)
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	69b8      	ldr	r0, [r7, #24]
 8003a8e:	f001 fab9 	bl	8005004 <pxPortInitialiseStack>
 8003a92:	4602      	mov	r2, r0
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aa4:	bf00      	nop
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	08005bd0 	.word	0x08005bd0
 8003ab0:	08005bf0 	.word	0x08005bf0
 8003ab4:	08005bb0 	.word	0x08005bb0

08003ab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ac0:	f001 fbd0 	bl	8005264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <prvAddNewTaskToReadyList+0xc4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <prvAddNewTaskToReadyList+0xc4>)
 8003acc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <prvAddNewTaskToReadyList+0xc4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d110      	bne.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ae4:	f000 fd9e 	bl	8004624 <prvInitialiseTaskLists>
 8003ae8:	e00d      	b.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <prvAddNewTaskToReadyList+0xcc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d802      	bhi.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b00:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <prvAddNewTaskToReadyList+0xd0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <prvAddNewTaskToReadyList+0xd0>)
 8003b0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <prvAddNewTaskToReadyList+0xd0>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <prvAddNewTaskToReadyList+0xd4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d903      	bls.n	8003b2c <prvAddNewTaskToReadyList+0x74>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <prvAddNewTaskToReadyList+0xd4>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <prvAddNewTaskToReadyList+0xd8>)
 8003b3a:	441a      	add	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f7ff f8fd 	bl	8002d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b48:	f001 fbbc 	bl	80052c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <prvAddNewTaskToReadyList+0xcc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d207      	bcs.n	8003b72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <prvAddNewTaskToReadyList+0xdc>)
 8003b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000dd8 	.word	0x20000dd8
 8003b80:	20000904 	.word	0x20000904
 8003b84:	20000de4 	.word	0x20000de4
 8003b88:	20000df4 	.word	0x20000df4
 8003b8c:	20000de0 	.word	0x20000de0
 8003b90:	20000908 	.word	0x20000908
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <vTaskDelay+0x60>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <vTaskDelay+0x30>
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60bb      	str	r3, [r7, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bc8:	f000 fa02 	bl	8003fd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bcc:	2100      	movs	r1, #0
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fe76 	bl	80048c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bd4:	f000 fa0a 	bl	8003fec <xTaskResumeAll>
 8003bd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d107      	bne.n	8003bf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <vTaskDelay+0x64>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000e00 	.word	0x20000e00
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003c08:	f001 fb2c 	bl	8005264 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <vTaskSuspend+0x18>
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <vTaskSuspend+0xd4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	e000      	b.n	8003c1a <vTaskSuspend+0x1a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff f8eb 	bl	8002dfc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3318      	adds	r3, #24
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff f8e2 	bl	8002dfc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4826      	ldr	r0, [pc, #152]	; (8003cd8 <vTaskSuspend+0xd8>)
 8003c40:	f7ff f87f 	bl	8002d42 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d103      	bne.n	8003c58 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003c58:	f001 fb34 	bl	80052c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <vTaskSuspend+0xdc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003c64:	f001 fafe 	bl	8005264 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003c68:	f000 fd7e 	bl	8004768 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003c6c:	f001 fb2a 	bl	80052c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003c70:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <vTaskSuspend+0xd4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d127      	bne.n	8003cca <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <vTaskSuspend+0xdc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003c82:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <vTaskSuspend+0xe0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <vTaskSuspend+0xa0>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	60bb      	str	r3, [r7, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <vTaskSuspend+0xe4>)
 8003ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cb0:	e00b      	b.n	8003cca <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <vTaskSuspend+0xd8>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <vTaskSuspend+0xe8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d103      	bne.n	8003cc6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <vTaskSuspend+0xd4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
	}
 8003cc4:	e001      	b.n	8003cca <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8003cc6:	f000 faf9 	bl	80042bc <vTaskSwitchContext>
	}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000904 	.word	0x20000904
 8003cd8:	20000dc4 	.word	0x20000dc4
 8003cdc:	20000de4 	.word	0x20000de4
 8003ce0:	20000e00 	.word	0x20000e00
 8003ce4:	e000ed04 	.word	0xe000ed04
 8003ce8:	20000dd8 	.word	0x20000dd8

08003cec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	60fb      	str	r3, [r7, #12]
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <prvTaskIsTaskSuspended+0x5c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10a      	bne.n	8003d38 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <prvTaskIsTaskSuspended+0x60>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d005      	beq.n	8003d38 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d38:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000dc4 	.word	0x20000dc4
 8003d4c:	20000d98 	.word	0x20000d98

08003d50 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <vTaskResume+0x28>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60bb      	str	r3, [r7, #8]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <vTaskResume+0xac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d038      	beq.n	8003df4 <vTaskResume+0xa4>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d035      	beq.n	8003df4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8003d88:	f001 fa6c 	bl	8005264 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff ffad 	bl	8003cec <prvTaskIsTaskSuspended>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02b      	beq.n	8003df0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff f82d 	bl	8002dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <vTaskResume+0xb0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d903      	bls.n	8003db6 <vTaskResume+0x66>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <vTaskResume+0xb0>)
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <vTaskResume+0xb4>)
 8003dc4:	441a      	add	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f7fe ffb8 	bl	8002d42 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <vTaskResume+0xac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d307      	bcc.n	8003df0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <vTaskResume+0xb8>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003df0:	f001 fa68 	bl	80052c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000904 	.word	0x20000904
 8003e00:	20000de0 	.word	0x20000de0
 8003e04:	20000908 	.word	0x20000908
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	61bb      	str	r3, [r7, #24]
}
 8003e34:	bf00      	nop
 8003e36:	e7fe      	b.n	8003e36 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e38:	f001 faf6 	bl	8005428 <vPortValidateInterruptPriority>
	__asm volatile
 8003e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	617a      	str	r2, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003e54:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e56:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003e58:	6a38      	ldr	r0, [r7, #32]
 8003e5a:	f7ff ff47 	bl	8003cec <prvTaskIsTaskSuspended>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d030      	beq.n	8003ec6 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <xTaskResumeFromISR+0xd0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d126      	bne.n	8003eba <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <xTaskResumeFromISR+0xd4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d301      	bcc.n	8003e7e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe ffba 	bl	8002dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <xTaskResumeFromISR+0xd8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d903      	bls.n	8003e9c <xTaskResumeFromISR+0x90>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <xTaskResumeFromISR+0xd8>)
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4a0f      	ldr	r2, [pc, #60]	; (8003ee8 <xTaskResumeFromISR+0xdc>)
 8003eaa:	441a      	add	r2, r3
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe ff45 	bl	8002d42 <vListInsertEnd>
 8003eb8:	e005      	b.n	8003ec6 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	480a      	ldr	r0, [pc, #40]	; (8003eec <xTaskResumeFromISR+0xe0>)
 8003ec2:	f7fe ff3e 	bl	8002d42 <vListInsertEnd>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f383 8811 	msr	BASEPRI, r3
}
 8003ed0:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3728      	adds	r7, #40	; 0x28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000e00 	.word	0x20000e00
 8003ee0:	20000904 	.word	0x20000904
 8003ee4:	20000de0 	.word	0x20000de0
 8003ee8:	20000908 	.word	0x20000908
 8003eec:	20000d98 	.word	0x20000d98

08003ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003efe:	463a      	mov	r2, r7
 8003f00:	1d39      	adds	r1, r7, #4
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe feba 	bl	8002c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	9202      	str	r2, [sp, #8]
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	4924      	ldr	r1, [pc, #144]	; (8003fb0 <vTaskStartScheduler+0xc0>)
 8003f20:	4824      	ldr	r0, [pc, #144]	; (8003fb4 <vTaskStartScheduler+0xc4>)
 8003f22:	f7ff fc81 	bl	8003828 <xTaskCreateStatic>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <vTaskStartScheduler+0xc8>)
 8003f2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f2c:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <vTaskStartScheduler+0xc8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f34:	2301      	movs	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e001      	b.n	8003f3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d102      	bne.n	8003f4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f44:	f000 fd10 	bl	8004968 <xTimerCreateTimerTask>
 8003f48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d11b      	bne.n	8003f88 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	613b      	str	r3, [r7, #16]
}
 8003f62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f64:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <vTaskStartScheduler+0xcc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3354      	adds	r3, #84	; 0x54
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <vTaskStartScheduler+0xd0>)
 8003f6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <vTaskStartScheduler+0xd4>)
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <vTaskStartScheduler+0xd8>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <vTaskStartScheduler+0xdc>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f82:	f001 f8cd 	bl	8005120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f86:	e00e      	b.n	8003fa6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d10a      	bne.n	8003fa6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60fb      	str	r3, [r7, #12]
}
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <vTaskStartScheduler+0xb4>
}
 8003fa6:	bf00      	nop
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	08005acc 	.word	0x08005acc
 8003fb4:	080045f5 	.word	0x080045f5
 8003fb8:	20000dfc 	.word	0x20000dfc
 8003fbc:	20000904 	.word	0x20000904
 8003fc0:	20000010 	.word	0x20000010
 8003fc4:	20000df8 	.word	0x20000df8
 8003fc8:	20000de4 	.word	0x20000de4
 8003fcc:	20000ddc 	.word	0x20000ddc

08003fd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <vTaskSuspendAll+0x18>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	4a03      	ldr	r2, [pc, #12]	; (8003fe8 <vTaskSuspendAll+0x18>)
 8003fdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	20000e00 	.word	0x20000e00

08003fec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ffa:	4b42      	ldr	r3, [pc, #264]	; (8004104 <xTaskResumeAll+0x118>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <xTaskResumeAll+0x2c>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	603b      	str	r3, [r7, #0]
}
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004018:	f001 f924 	bl	8005264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800401c:	4b39      	ldr	r3, [pc, #228]	; (8004104 <xTaskResumeAll+0x118>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3b01      	subs	r3, #1
 8004022:	4a38      	ldr	r2, [pc, #224]	; (8004104 <xTaskResumeAll+0x118>)
 8004024:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004026:	4b37      	ldr	r3, [pc, #220]	; (8004104 <xTaskResumeAll+0x118>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d162      	bne.n	80040f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <xTaskResumeAll+0x11c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d05e      	beq.n	80040f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004036:	e02f      	b.n	8004098 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004038:	4b34      	ldr	r3, [pc, #208]	; (800410c <xTaskResumeAll+0x120>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3318      	adds	r3, #24
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fed9 	bl	8002dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fed4 	bl	8002dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <xTaskResumeAll+0x124>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d903      	bls.n	8004068 <xTaskResumeAll+0x7c>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <xTaskResumeAll+0x124>)
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4a27      	ldr	r2, [pc, #156]	; (8004114 <xTaskResumeAll+0x128>)
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f7fe fe5f 	bl	8002d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <xTaskResumeAll+0x12c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <xTaskResumeAll+0x130>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004098:	4b1c      	ldr	r3, [pc, #112]	; (800410c <xTaskResumeAll+0x120>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1cb      	bne.n	8004038 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040a6:	f000 fb5f 	bl	8004768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <xTaskResumeAll+0x134>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d010      	beq.n	80040d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040b6:	f000 f847 	bl	8004148 <xTaskIncrementTick>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <xTaskResumeAll+0x130>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f1      	bne.n	80040b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <xTaskResumeAll+0x134>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <xTaskResumeAll+0x130>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <xTaskResumeAll+0x138>)
 80040e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040f4:	f001 f8e6 	bl	80052c4 <vPortExitCritical>

	return xAlreadyYielded;
 80040f8:	68bb      	ldr	r3, [r7, #8]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000e00 	.word	0x20000e00
 8004108:	20000dd8 	.word	0x20000dd8
 800410c:	20000d98 	.word	0x20000d98
 8004110:	20000de0 	.word	0x20000de0
 8004114:	20000908 	.word	0x20000908
 8004118:	20000904 	.word	0x20000904
 800411c:	20000dec 	.word	0x20000dec
 8004120:	20000de8 	.word	0x20000de8
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <xTaskGetTickCount+0x1c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004134:	687b      	ldr	r3, [r7, #4]
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000ddc 	.word	0x20000ddc

08004148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004152:	4b4f      	ldr	r3, [pc, #316]	; (8004290 <xTaskIncrementTick+0x148>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 808f 	bne.w	800427a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800415c:	4b4d      	ldr	r3, [pc, #308]	; (8004294 <xTaskIncrementTick+0x14c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004164:	4a4b      	ldr	r2, [pc, #300]	; (8004294 <xTaskIncrementTick+0x14c>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d120      	bne.n	80041b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004170:	4b49      	ldr	r3, [pc, #292]	; (8004298 <xTaskIncrementTick+0x150>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <xTaskIncrementTick+0x48>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	603b      	str	r3, [r7, #0]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xTaskIncrementTick+0x46>
 8004190:	4b41      	ldr	r3, [pc, #260]	; (8004298 <xTaskIncrementTick+0x150>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <xTaskIncrementTick+0x154>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <xTaskIncrementTick+0x150>)
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4a3f      	ldr	r2, [pc, #252]	; (800429c <xTaskIncrementTick+0x154>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <xTaskIncrementTick+0x158>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	4a3d      	ldr	r2, [pc, #244]	; (80042a0 <xTaskIncrementTick+0x158>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	f000 fadb 	bl	8004768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041b2:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <xTaskIncrementTick+0x15c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d349      	bcc.n	8004250 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <xTaskIncrementTick+0x150>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <xTaskIncrementTick+0x15c>)
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	601a      	str	r2, [r3, #0]
					break;
 80041ce:	e03f      	b.n	8004250 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d0:	4b31      	ldr	r3, [pc, #196]	; (8004298 <xTaskIncrementTick+0x150>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d203      	bcs.n	80041f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041e8:	4a2e      	ldr	r2, [pc, #184]	; (80042a4 <xTaskIncrementTick+0x15c>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041ee:	e02f      	b.n	8004250 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fe01 	bl	8002dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3318      	adds	r3, #24
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fdf8 	bl	8002dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <xTaskIncrementTick+0x160>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d903      	bls.n	8004220 <xTaskIncrementTick+0xd8>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <xTaskIncrementTick+0x160>)
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4a1f      	ldr	r2, [pc, #124]	; (80042ac <xTaskIncrementTick+0x164>)
 800422e:	441a      	add	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f7fe fd83 	bl	8002d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <xTaskIncrementTick+0x168>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	429a      	cmp	r2, r3
 8004248:	d3b8      	bcc.n	80041bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800424e:	e7b5      	b.n	80041bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004250:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <xTaskIncrementTick+0x168>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	4915      	ldr	r1, [pc, #84]	; (80042ac <xTaskIncrementTick+0x164>)
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d901      	bls.n	800426c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004268:	2301      	movs	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <xTaskIncrementTick+0x16c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e004      	b.n	8004284 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <xTaskIncrementTick+0x170>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <xTaskIncrementTick+0x170>)
 8004282:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004284:	697b      	ldr	r3, [r7, #20]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000e00 	.word	0x20000e00
 8004294:	20000ddc 	.word	0x20000ddc
 8004298:	20000d90 	.word	0x20000d90
 800429c:	20000d94 	.word	0x20000d94
 80042a0:	20000df0 	.word	0x20000df0
 80042a4:	20000df8 	.word	0x20000df8
 80042a8:	20000de0 	.word	0x20000de0
 80042ac:	20000908 	.word	0x20000908
 80042b0:	20000904 	.word	0x20000904
 80042b4:	20000dec 	.word	0x20000dec
 80042b8:	20000de8 	.word	0x20000de8

080042bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042c2:	4b2a      	ldr	r3, [pc, #168]	; (800436c <vTaskSwitchContext+0xb0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042ca:	4b29      	ldr	r3, [pc, #164]	; (8004370 <vTaskSwitchContext+0xb4>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042d0:	e046      	b.n	8004360 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <vTaskSwitchContext+0xb4>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <vTaskSwitchContext+0xb8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e010      	b.n	8004302 <vTaskSwitchContext+0x46>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <vTaskSwitchContext+0x40>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	607b      	str	r3, [r7, #4]
}
 80042f8:	bf00      	nop
 80042fa:	e7fe      	b.n	80042fa <vTaskSwitchContext+0x3e>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3b01      	subs	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	491d      	ldr	r1, [pc, #116]	; (8004378 <vTaskSwitchContext+0xbc>)
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0e4      	beq.n	80042e0 <vTaskSwitchContext+0x24>
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4a15      	ldr	r2, [pc, #84]	; (8004378 <vTaskSwitchContext+0xbc>)
 8004322:	4413      	add	r3, r2
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	3308      	adds	r3, #8
 8004338:	429a      	cmp	r2, r3
 800433a:	d104      	bne.n	8004346 <vTaskSwitchContext+0x8a>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a0b      	ldr	r2, [pc, #44]	; (800437c <vTaskSwitchContext+0xc0>)
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4a08      	ldr	r2, [pc, #32]	; (8004374 <vTaskSwitchContext+0xb8>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <vTaskSwitchContext+0xc0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3354      	adds	r3, #84	; 0x54
 800435c:	4a08      	ldr	r2, [pc, #32]	; (8004380 <vTaskSwitchContext+0xc4>)
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000e00 	.word	0x20000e00
 8004370:	20000dec 	.word	0x20000dec
 8004374:	20000de0 	.word	0x20000de0
 8004378:	20000908 	.word	0x20000908
 800437c:	20000904 	.word	0x20000904
 8004380:	20000010 	.word	0x20000010

08004384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60fb      	str	r3, [r7, #12]
}
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <vTaskPlaceOnEventList+0x44>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3318      	adds	r3, #24
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fe fce9 	bl	8002d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b8:	2101      	movs	r1, #1
 80043ba:	6838      	ldr	r0, [r7, #0]
 80043bc:	f000 fa80 	bl	80048c0 <prvAddCurrentTaskToDelayedList>
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000904 	.word	0x20000904

080043cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	617b      	str	r3, [r7, #20]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <vTaskPlaceOnEventListRestricted+0x54>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3318      	adds	r3, #24
 80043fa:	4619      	mov	r1, r3
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7fe fca0 	bl	8002d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	68b8      	ldr	r0, [r7, #8]
 8004412:	f000 fa55 	bl	80048c0 <prvAddCurrentTaskToDelayedList>
	}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000904 	.word	0x20000904

08004424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60fb      	str	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	3318      	adds	r3, #24
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe fcd1 	bl	8002dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <xTaskRemoveFromEventList+0xb0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11d      	bne.n	800449e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fcc8 	bl	8002dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <xTaskRemoveFromEventList+0xb4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d903      	bls.n	8004480 <xTaskRemoveFromEventList+0x5c>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <xTaskRemoveFromEventList+0xb4>)
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <xTaskRemoveFromEventList+0xb8>)
 800448e:	441a      	add	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7fe fc53 	bl	8002d42 <vListInsertEnd>
 800449c:	e005      	b.n	80044aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3318      	adds	r3, #24
 80044a2:	4619      	mov	r1, r3
 80044a4:	480e      	ldr	r0, [pc, #56]	; (80044e0 <xTaskRemoveFromEventList+0xbc>)
 80044a6:	f7fe fc4c 	bl	8002d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <xTaskRemoveFromEventList+0xc0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d905      	bls.n	80044c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <xTaskRemoveFromEventList+0xc4>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e001      	b.n	80044c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044c8:	697b      	ldr	r3, [r7, #20]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000e00 	.word	0x20000e00
 80044d8:	20000de0 	.word	0x20000de0
 80044dc:	20000908 	.word	0x20000908
 80044e0:	20000d98 	.word	0x20000d98
 80044e4:	20000904 	.word	0x20000904
 80044e8:	20000dec 	.word	0x20000dec

080044ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <vTaskInternalSetTimeOutState+0x24>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <vTaskInternalSetTimeOutState+0x28>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20000df0 	.word	0x20000df0
 8004514:	20000ddc 	.word	0x20000ddc

08004518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	613b      	str	r3, [r7, #16]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800455a:	f000 fe83 	bl	8005264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <xTaskCheckForTimeOut+0xbc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d102      	bne.n	800457e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	e023      	b.n	80045c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <xTaskCheckForTimeOut+0xc0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d007      	beq.n	800459a <xTaskCheckForTimeOut+0x82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d302      	bcc.n	800459a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e015      	b.n	80045c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d20b      	bcs.n	80045bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ff9b 	bl	80044ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e004      	b.n	80045c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045c6:	f000 fe7d 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 80045ca:	69fb      	ldr	r3, [r7, #28]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000ddc 	.word	0x20000ddc
 80045d8:	20000df0 	.word	0x20000df0

080045dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <vTaskMissedYield+0x14>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000dec 	.word	0x20000dec

080045f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045fc:	f000 f852 	bl	80046a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <prvIdleTask+0x28>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d9f9      	bls.n	80045fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <prvIdleTask+0x2c>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004618:	e7f0      	b.n	80045fc <prvIdleTask+0x8>
 800461a:	bf00      	nop
 800461c:	20000908 	.word	0x20000908
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	e00c      	b.n	800464a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <prvInitialiseTaskLists+0x60>)
 800463c:	4413      	add	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fb52 	bl	8002ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3301      	adds	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b37      	cmp	r3, #55	; 0x37
 800464e:	d9ef      	bls.n	8004630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <prvInitialiseTaskLists+0x64>)
 8004652:	f7fe fb49 	bl	8002ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004656:	480d      	ldr	r0, [pc, #52]	; (800468c <prvInitialiseTaskLists+0x68>)
 8004658:	f7fe fb46 	bl	8002ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800465c:	480c      	ldr	r0, [pc, #48]	; (8004690 <prvInitialiseTaskLists+0x6c>)
 800465e:	f7fe fb43 	bl	8002ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004662:	480c      	ldr	r0, [pc, #48]	; (8004694 <prvInitialiseTaskLists+0x70>)
 8004664:	f7fe fb40 	bl	8002ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <prvInitialiseTaskLists+0x74>)
 800466a:	f7fe fb3d 	bl	8002ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <prvInitialiseTaskLists+0x78>)
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <prvInitialiseTaskLists+0x64>)
 8004672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <prvInitialiseTaskLists+0x7c>)
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <prvInitialiseTaskLists+0x68>)
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000908 	.word	0x20000908
 8004688:	20000d68 	.word	0x20000d68
 800468c:	20000d7c 	.word	0x20000d7c
 8004690:	20000d98 	.word	0x20000d98
 8004694:	20000dac 	.word	0x20000dac
 8004698:	20000dc4 	.word	0x20000dc4
 800469c:	20000d90 	.word	0x20000d90
 80046a0:	20000d94 	.word	0x20000d94

080046a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046aa:	e019      	b.n	80046e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046ac:	f000 fdda 	bl	8005264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <prvCheckTasksWaitingTermination+0x50>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fb9d 	bl	8002dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <prvCheckTasksWaitingTermination+0x54>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <prvCheckTasksWaitingTermination+0x54>)
 80046ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046d6:	f000 fdf5 	bl	80052c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f810 	bl	8004700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e1      	bne.n	80046ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000dac 	.word	0x20000dac
 80046f8:	20000dd8 	.word	0x20000dd8
 80046fc:	20000dc0 	.word	0x20000dc0

08004700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3354      	adds	r3, #84	; 0x54
 800470c:	4618      	mov	r0, r3
 800470e:	f001 f8ff 	bl	8005910 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004718:	2b00      	cmp	r3, #0
 800471a:	d108      	bne.n	800472e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	4618      	mov	r0, r3
 8004722:	f000 ff8d 	bl	8005640 <vPortFree>
				vPortFree( pxTCB );
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 ff8a 	bl	8005640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800472c:	e018      	b.n	8004760 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004734:	2b01      	cmp	r3, #1
 8004736:	d103      	bne.n	8004740 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 ff81 	bl	8005640 <vPortFree>
	}
 800473e:	e00f      	b.n	8004760 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004746:	2b02      	cmp	r3, #2
 8004748:	d00a      	beq.n	8004760 <prvDeleteTCB+0x60>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <prvDeleteTCB+0x5e>
	}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <prvResetNextTaskUnblockTime+0x38>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <prvResetNextTaskUnblockTime+0x3c>)
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004780:	e008      	b.n	8004794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <prvResetNextTaskUnblockTime+0x38>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004792:	6013      	str	r3, [r2, #0]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000d90 	.word	0x20000d90
 80047a4:	20000df8 	.word	0x20000df8

080047a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <xTaskGetSchedulerState+0x34>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047b6:	2301      	movs	r3, #1
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	e008      	b.n	80047ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <xTaskGetSchedulerState+0x38>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047c4:	2302      	movs	r3, #2
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	e001      	b.n	80047ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047ca:	2300      	movs	r3, #0
 80047cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047ce:	687b      	ldr	r3, [r7, #4]
	}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000de4 	.word	0x20000de4
 80047e0:	20000e00 	.word	0x20000e00

080047e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d056      	beq.n	80048a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <xTaskPriorityDisinherit+0xd0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	429a      	cmp	r2, r3
 8004802:	d00a      	beq.n	800481a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60bb      	str	r3, [r7, #8]
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	1e5a      	subs	r2, r3, #1
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	429a      	cmp	r2, r3
 800484c:	d02c      	beq.n	80048a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	2b00      	cmp	r3, #0
 8004854:	d128      	bne.n	80048a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3304      	adds	r3, #4
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe face 	bl	8002dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <xTaskPriorityDisinherit+0xd4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d903      	bls.n	8004888 <xTaskPriorityDisinherit+0xa4>
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <xTaskPriorityDisinherit+0xd4>)
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a09      	ldr	r2, [pc, #36]	; (80048bc <xTaskPriorityDisinherit+0xd8>)
 8004896:	441a      	add	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f7fe fa4f 	bl	8002d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048a8:	697b      	ldr	r3, [r7, #20]
	}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000904 	.word	0x20000904
 80048b8:	20000de0 	.word	0x20000de0
 80048bc:	20000908 	.word	0x20000908

080048c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <prvAddCurrentTaskToDelayedList+0x90>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d0:	4b20      	ldr	r3, [pc, #128]	; (8004954 <prvAddCurrentTaskToDelayedList+0x94>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fa90 	bl	8002dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d10a      	bne.n	80048fa <prvAddCurrentTaskToDelayedList+0x3a>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ea:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <prvAddCurrentTaskToDelayedList+0x94>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4819      	ldr	r0, [pc, #100]	; (8004958 <prvAddCurrentTaskToDelayedList+0x98>)
 80048f4:	f7fe fa25 	bl	8002d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048f8:	e026      	b.n	8004948 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4413      	add	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <prvAddCurrentTaskToDelayedList+0x94>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	429a      	cmp	r2, r3
 8004910:	d209      	bcs.n	8004926 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <prvAddCurrentTaskToDelayedList+0x94>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fe fa33 	bl	8002d8a <vListInsert>
}
 8004924:	e010      	b.n	8004948 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <prvAddCurrentTaskToDelayedList+0x94>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fe fa29 	bl	8002d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <prvAddCurrentTaskToDelayedList+0xa4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d202      	bcs.n	8004948 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004942:	4a08      	ldr	r2, [pc, #32]	; (8004964 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000ddc 	.word	0x20000ddc
 8004954:	20000904 	.word	0x20000904
 8004958:	20000dc4 	.word	0x20000dc4
 800495c:	20000d94 	.word	0x20000d94
 8004960:	20000d90 	.word	0x20000d90
 8004964:	20000df8 	.word	0x20000df8

08004968 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004972:	f000 fb07 	bl	8004f84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004976:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <xTimerCreateTimerTask+0x80>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d021      	beq.n	80049c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004986:	1d3a      	adds	r2, r7, #4
 8004988:	f107 0108 	add.w	r1, r7, #8
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe f98f 	bl	8002cb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	9202      	str	r2, [sp, #8]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	2302      	movs	r3, #2
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	460a      	mov	r2, r1
 80049a8:	4910      	ldr	r1, [pc, #64]	; (80049ec <xTimerCreateTimerTask+0x84>)
 80049aa:	4811      	ldr	r0, [pc, #68]	; (80049f0 <xTimerCreateTimerTask+0x88>)
 80049ac:	f7fe ff3c 	bl	8003828 <xTaskCreateStatic>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <xTimerCreateTimerTask+0x8c>)
 80049b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <xTimerCreateTimerTask+0x8c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049be:	2301      	movs	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	613b      	str	r3, [r7, #16]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049de:	697b      	ldr	r3, [r7, #20]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000e34 	.word	0x20000e34
 80049ec:	08005ad4 	.word	0x08005ad4
 80049f0:	08004b2d 	.word	0x08004b2d
 80049f4:	20000e38 	.word	0x20000e38

080049f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	623b      	str	r3, [r7, #32]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <xTimerGenericCommand+0x98>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02a      	beq.n	8004a84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	dc18      	bgt.n	8004a72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a40:	f7ff feb2 	bl	80047a8 <xTaskGetSchedulerState>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d109      	bne.n	8004a5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <xTimerGenericCommand+0x98>)
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	f107 0110 	add.w	r1, r7, #16
 8004a52:	2300      	movs	r3, #0
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	f7fe faff 	bl	8003058 <xQueueGenericSend>
 8004a5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a5c:	e012      	b.n	8004a84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <xTimerGenericCommand+0x98>)
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	f107 0110 	add.w	r1, r7, #16
 8004a66:	2300      	movs	r3, #0
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f7fe faf5 	bl	8003058 <xQueueGenericSend>
 8004a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004a70:	e008      	b.n	8004a84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <xTimerGenericCommand+0x98>)
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	f107 0110 	add.w	r1, r7, #16
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	f7fe fbe9 	bl	8003254 <xQueueGenericSendFromISR>
 8004a82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000e34 	.word	0x20000e34

08004a94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9e:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <prvProcessExpiredTimer+0x94>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe f9a5 	bl	8002dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d022      	beq.n	8004b06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	18d1      	adds	r1, r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	f000 f8d1 	bl	8004c74 <prvInsertTimerInActiveList>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01f      	beq.n	8004b18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7ff ff88 	bl	80049f8 <xTimerGenericCommand>
 8004ae8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d113      	bne.n	8004b18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	6978      	ldr	r0, [r7, #20]
 8004b1e:	4798      	blx	r3
}
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000e2c 	.word	0x20000e2c

08004b2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f857 	bl	8004bec <prvGetNextExpireTime>
 8004b3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4619      	mov	r1, r3
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f803 	bl	8004b50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b4a:	f000 f8d5 	bl	8004cf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b4e:	e7f1      	b.n	8004b34 <prvTimerTask+0x8>

08004b50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b5a:	f7ff fa39 	bl	8003fd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f866 	bl	8004c34 <prvSampleTimeNow>
 8004b68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d130      	bne.n	8004bd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <prvProcessTimerOrBlockTask+0x3c>
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d806      	bhi.n	8004b8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b7e:	f7ff fa35 	bl	8003fec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff85 	bl	8004a94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b8a:	e024      	b.n	8004bd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <prvProcessTimerOrBlockTask+0x90>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <prvProcessTimerOrBlockTask+0x50>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <prvProcessTimerOrBlockTask+0x52>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <prvProcessTimerOrBlockTask+0x94>)
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f7fe fe05 	bl	80037c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bb6:	f7ff fa19 	bl	8003fec <xTaskResumeAll>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <prvProcessTimerOrBlockTask+0x98>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
}
 8004bd0:	e001      	b.n	8004bd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bd2:	f7ff fa0b 	bl	8003fec <xTaskResumeAll>
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000e30 	.word	0x20000e30
 8004be4:	20000e34 	.word	0x20000e34
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <prvGetNextExpireTime+0x44>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <prvGetNextExpireTime+0x16>
 8004bfe:	2201      	movs	r2, #1
 8004c00:	e000      	b.n	8004c04 <prvGetNextExpireTime+0x18>
 8004c02:	2200      	movs	r2, #0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <prvGetNextExpireTime+0x44>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e001      	b.n	8004c20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c20:	68fb      	ldr	r3, [r7, #12]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000e2c 	.word	0x20000e2c

08004c34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c3c:	f7ff fa74 	bl	8004128 <xTaskGetTickCount>
 8004c40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <prvSampleTimeNow+0x3c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d205      	bcs.n	8004c58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c4c:	f000 f936 	bl	8004ebc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c5e:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <prvSampleTimeNow+0x3c>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c64:	68fb      	ldr	r3, [r7, #12]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000e3c 	.word	0x20000e3c

08004c74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d812      	bhi.n	8004cc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d302      	bcc.n	8004cae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e01b      	b.n	8004ce6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <prvInsertTimerInActiveList+0x7c>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f7fe f866 	bl	8002d8a <vListInsert>
 8004cbe:	e012      	b.n	8004ce6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d206      	bcs.n	8004cd6 <prvInsertTimerInActiveList+0x62>
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e007      	b.n	8004ce6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <prvInsertTimerInActiveList+0x80>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe f852 	bl	8002d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ce6:	697b      	ldr	r3, [r7, #20]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000e30 	.word	0x20000e30
 8004cf4:	20000e2c 	.word	0x20000e2c

08004cf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	; 0x38
 8004cfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cfe:	e0ca      	b.n	8004e96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	da18      	bge.n	8004d38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	3304      	adds	r3, #4
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	61fb      	str	r3, [r7, #28]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2e:	6850      	ldr	r0, [r2, #4]
 8004d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d32:	6892      	ldr	r2, [r2, #8]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f2c0 80aa 	blt.w	8004e94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d004      	beq.n	8004d56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe f853 	bl	8002dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d56:	463b      	mov	r3, r7
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff6b 	bl	8004c34 <prvSampleTimeNow>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b09      	cmp	r3, #9
 8004d64:	f200 8097 	bhi.w	8004e96 <prvProcessReceivedCommands+0x19e>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <prvProcessReceivedCommands+0x78>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004d99 	.word	0x08004d99
 8004d7c:	08004e0d 	.word	0x08004e0d
 8004d80:	08004e21 	.word	0x08004e21
 8004d84:	08004e6b 	.word	0x08004e6b
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004d99 	.word	0x08004d99
 8004d90:	08004e0d 	.word	0x08004e0d
 8004d94:	08004e21 	.word	0x08004e21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	18d1      	adds	r1, r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db8:	f7ff ff5c 	bl	8004c74 <prvInsertTimerInActiveList>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d069      	beq.n	8004e96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05e      	beq.n	8004e96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	441a      	add	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dea:	f7ff fe05 	bl	80049f8 <xTimerGenericCommand>
 8004dee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d14f      	bne.n	8004e96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	61bb      	str	r3, [r7, #24]
}
 8004e08:	bf00      	nop
 8004e0a:	e7fe      	b.n	8004e0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e1e:	e03a      	b.n	8004e96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	617b      	str	r3, [r7, #20]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	18d1      	adds	r1, r2, r3
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e64:	f7ff ff06 	bl	8004c74 <prvInsertTimerInActiveList>
					break;
 8004e68:	e015      	b.n	8004e96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7a:	f000 fbe1 	bl	8005640 <vPortFree>
 8004e7e:	e00a      	b.n	8004e96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e92:	e000      	b.n	8004e96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <prvProcessReceivedCommands+0x1c0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	1d39      	adds	r1, r7, #4
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fa74 	bl	800338c <xQueueReceive>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f47f af2a 	bne.w	8004d00 <prvProcessReceivedCommands+0x8>
	}
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	3730      	adds	r7, #48	; 0x30
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000e34 	.word	0x20000e34

08004ebc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ec2:	e048      	b.n	8004f56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <prvSwitchTimerLists+0xc0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ece:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <prvSwitchTimerLists+0xc0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fd ff8d 	bl	8002dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02e      	beq.n	8004f56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d90e      	bls.n	8004f28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f16:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <prvSwitchTimerLists+0xc0>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7fd ff32 	bl	8002d8a <vListInsert>
 8004f26:	e016      	b.n	8004f56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	2100      	movs	r1, #0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fd60 	bl	80049f8 <xTimerGenericCommand>
 8004f38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	603b      	str	r3, [r7, #0]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <prvSwitchTimerLists+0xc0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1b1      	bne.n	8004ec4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <prvSwitchTimerLists+0xc0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <prvSwitchTimerLists+0xc4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <prvSwitchTimerLists+0xc0>)
 8004f6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f6e:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <prvSwitchTimerLists+0xc4>)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000e2c 	.word	0x20000e2c
 8004f80:	20000e30 	.word	0x20000e30

08004f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f8a:	f000 f96b 	bl	8005264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d120      	bne.n	8004fd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f96:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <prvCheckForValidListAndQueue+0x64>)
 8004f98:	f7fd fea6 	bl	8002ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f9c:	4813      	ldr	r0, [pc, #76]	; (8004fec <prvCheckForValidListAndQueue+0x68>)
 8004f9e:	f7fd fea3 	bl	8002ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <prvCheckForValidListAndQueue+0x6c>)
 8004fa4:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <prvCheckForValidListAndQueue+0x64>)
 8004fa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <prvCheckForValidListAndQueue+0x70>)
 8004faa:	4a10      	ldr	r2, [pc, #64]	; (8004fec <prvCheckForValidListAndQueue+0x68>)
 8004fac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <prvCheckForValidListAndQueue+0x74>)
 8004fb4:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <prvCheckForValidListAndQueue+0x78>)
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	200a      	movs	r0, #10
 8004fba:	f7fd ffb1 	bl	8002f20 <xQueueGenericCreateStatic>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	490b      	ldr	r1, [pc, #44]	; (8005000 <prvCheckForValidListAndQueue+0x7c>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fbca 	bl	800376c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fd8:	f000 f974 	bl	80052c4 <vPortExitCritical>
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000e34 	.word	0x20000e34
 8004fe8:	20000e04 	.word	0x20000e04
 8004fec:	20000e18 	.word	0x20000e18
 8004ff0:	20000e2c 	.word	0x20000e2c
 8004ff4:	20000e30 	.word	0x20000e30
 8004ff8:	20000ee0 	.word	0x20000ee0
 8004ffc:	20000e40 	.word	0x20000e40
 8005000:	08005adc 	.word	0x08005adc

08005004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b04      	subs	r3, #4
 8005014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800501c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3b04      	subs	r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b04      	subs	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005034:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <pxPortInitialiseStack+0x64>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b14      	subs	r3, #20
 800503e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b04      	subs	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f06f 0202 	mvn.w	r2, #2
 8005052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b20      	subs	r3, #32
 8005058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	0800506d 	.word	0x0800506d

0800506c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <prvTaskExitError+0x54>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d00a      	beq.n	8005096 <prvTaskExitError+0x2a>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <prvTaskExitError+0x28>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
}
 80050a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050aa:	bf00      	nop
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0fc      	beq.n	80050ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	2000000c 	.word	0x2000000c
	...

080050d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <pxCurrentTCBConst2>)
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f380 8809 	msr	PSP, r0
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8811 	msr	BASEPRI, r0
 80050ea:	4770      	bx	lr
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst2>:
 80050f0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050f8:	4808      	ldr	r0, [pc, #32]	; (800511c <prvPortStartFirstTask+0x24>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8814 	msr	CONTROL, r0
 800510a:	b662      	cpsie	i
 800510c:	b661      	cpsie	f
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	df00      	svc	0
 8005118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800511a:	bf00      	nop
 800511c:	e000ed08 	.word	0xe000ed08

08005120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005126:	4b46      	ldr	r3, [pc, #280]	; (8005240 <xPortStartScheduler+0x120>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a46      	ldr	r2, [pc, #280]	; (8005244 <xPortStartScheduler+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10a      	bne.n	8005146 <xPortStartScheduler+0x26>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	613b      	str	r3, [r7, #16]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005146:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <xPortStartScheduler+0x120>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <xPortStartScheduler+0x128>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10a      	bne.n	8005166 <xPortStartScheduler+0x46>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60fb      	str	r3, [r7, #12]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005166:	4b39      	ldr	r3, [pc, #228]	; (800524c <xPortStartScheduler+0x12c>)
 8005168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	22ff      	movs	r2, #255	; 0xff
 8005176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <xPortStartScheduler+0x130>)
 800518c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800518e:	4b31      	ldr	r3, [pc, #196]	; (8005254 <xPortStartScheduler+0x134>)
 8005190:	2207      	movs	r2, #7
 8005192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005194:	e009      	b.n	80051aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <xPortStartScheduler+0x134>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3b01      	subs	r3, #1
 800519c:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <xPortStartScheduler+0x134>)
 800519e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d0ef      	beq.n	8005196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <xPortStartScheduler+0x134>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1c3 0307 	rsb	r3, r3, #7
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d00a      	beq.n	80051d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60bb      	str	r3, [r7, #8]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <xPortStartScheduler+0x134>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <xPortStartScheduler+0x134>)
 80051e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <xPortStartScheduler+0x134>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ea:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <xPortStartScheduler+0x134>)
 80051ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051f6:	4b18      	ldr	r3, [pc, #96]	; (8005258 <xPortStartScheduler+0x138>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a17      	ldr	r2, [pc, #92]	; (8005258 <xPortStartScheduler+0x138>)
 80051fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <xPortStartScheduler+0x138>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a14      	ldr	r2, [pc, #80]	; (8005258 <xPortStartScheduler+0x138>)
 8005208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800520c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800520e:	f000 f8dd 	bl	80053cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <xPortStartScheduler+0x13c>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005218:	f000 f8fc 	bl	8005414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <xPortStartScheduler+0x140>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0f      	ldr	r2, [pc, #60]	; (8005260 <xPortStartScheduler+0x140>)
 8005222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005228:	f7ff ff66 	bl	80050f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800522c:	f7ff f846 	bl	80042bc <vTaskSwitchContext>
	prvTaskExitError();
 8005230:	f7ff ff1c 	bl	800506c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	e000ed00 	.word	0xe000ed00
 8005244:	410fc271 	.word	0x410fc271
 8005248:	410fc270 	.word	0x410fc270
 800524c:	e000e400 	.word	0xe000e400
 8005250:	20000f30 	.word	0x20000f30
 8005254:	20000f34 	.word	0x20000f34
 8005258:	e000ed20 	.word	0xe000ed20
 800525c:	2000000c 	.word	0x2000000c
 8005260:	e000ef34 	.word	0xe000ef34

08005264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	607b      	str	r3, [r7, #4]
}
 800527c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <vPortEnterCritical+0x58>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a0d      	ldr	r2, [pc, #52]	; (80052bc <vPortEnterCritical+0x58>)
 8005286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <vPortEnterCritical+0x58>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10f      	bne.n	80052b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <vPortEnterCritical+0x5c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	603b      	str	r3, [r7, #0]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <vPortEnterCritical+0x4a>
	}
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	2000000c 	.word	0x2000000c
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <vPortExitCritical+0x50>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <vPortExitCritical+0x24>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	607b      	str	r3, [r7, #4]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <vPortExitCritical+0x50>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <vPortExitCritical+0x50>)
 80052f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <vPortExitCritical+0x50>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <vPortExitCritical+0x42>
 80052fa:	2300      	movs	r3, #0
 80052fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f383 8811 	msr	BASEPRI, r3
}
 8005304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000000c 	.word	0x2000000c
	...

08005320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005320:	f3ef 8009 	mrs	r0, PSP
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <pxCurrentTCBConst>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f01e 0f10 	tst.w	lr, #16
 8005330:	bf08      	it	eq
 8005332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005344:	f380 8811 	msr	BASEPRI, r0
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f7fe ffb4 	bl	80042bc <vTaskSwitchContext>
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f380 8811 	msr	BASEPRI, r0
 800535c:	bc09      	pop	{r0, r3}
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005366:	f01e 0f10 	tst.w	lr, #16
 800536a:	bf08      	it	eq
 800536c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005370:	f380 8809 	msr	PSP, r0
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst>:
 8005380:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053a2:	f7fe fed1 	bl	8004148 <xTaskIncrementTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <xPortSysTickHandler+0x40>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
}
 80053be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <vPortSetupTimerInterrupt+0x38>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <vPortSetupTimerInterrupt+0x3c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <vPortSetupTimerInterrupt+0x40>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <vPortSetupTimerInterrupt+0x44>)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ee:	4b04      	ldr	r3, [pc, #16]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e010 	.word	0xe000e010
 8005404:	e000e018 	.word	0xe000e018
 8005408:	20000000 	.word	0x20000000
 800540c:	10624dd3 	.word	0x10624dd3
 8005410:	e000e014 	.word	0xe000e014

08005414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005424 <vPortEnableVFP+0x10>
 8005418:	6801      	ldr	r1, [r0, #0]
 800541a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800541e:	6001      	str	r1, [r0, #0]
 8005420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005422:	bf00      	nop
 8005424:	e000ed88 	.word	0xe000ed88

08005428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800542e:	f3ef 8305 	mrs	r3, IPSR
 8005432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	d914      	bls.n	8005464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <vPortValidateInterruptPriority+0x70>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005444:	4b15      	ldr	r3, [pc, #84]	; (800549c <vPortValidateInterruptPriority+0x74>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	7afa      	ldrb	r2, [r7, #11]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20a      	bcs.n	8005464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <vPortValidateInterruptPriority+0x78>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <vPortValidateInterruptPriority+0x7c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d90a      	bls.n	800548a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	603b      	str	r3, [r7, #0]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <vPortValidateInterruptPriority+0x60>
	}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	e000e3f0 	.word	0xe000e3f0
 800549c:	20000f30 	.word	0x20000f30
 80054a0:	e000ed0c 	.word	0xe000ed0c
 80054a4:	20000f34 	.word	0x20000f34

080054a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054b4:	f7fe fd8c 	bl	8003fd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054b8:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <pvPortMalloc+0x180>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054c0:	f000 f920 	bl	8005704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054c4:	4b59      	ldr	r3, [pc, #356]	; (800562c <pvPortMalloc+0x184>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 8093 	bne.w	80055f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01d      	beq.n	8005514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054d8:	2208      	movs	r2, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f023 0307 	bic.w	r3, r3, #7
 80054f0:	3308      	adds	r3, #8
 80054f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <pvPortMalloc+0x6c>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	617b      	str	r3, [r7, #20]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d06e      	beq.n	80055f8 <pvPortMalloc+0x150>
 800551a:	4b45      	ldr	r3, [pc, #276]	; (8005630 <pvPortMalloc+0x188>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d869      	bhi.n	80055f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005524:	4b43      	ldr	r3, [pc, #268]	; (8005634 <pvPortMalloc+0x18c>)
 8005526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <pvPortMalloc+0x18c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552e:	e004      	b.n	800553a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d903      	bls.n	800554c <pvPortMalloc+0xa4>
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f1      	bne.n	8005530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <pvPortMalloc+0x180>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	429a      	cmp	r2, r3
 8005554:	d050      	beq.n	80055f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2208      	movs	r2, #8
 800555c:	4413      	add	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	2308      	movs	r3, #8
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	429a      	cmp	r2, r3
 8005576:	d91f      	bls.n	80055b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <pvPortMalloc+0xf8>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	613b      	str	r3, [r7, #16]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f000 f908 	bl	80057c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055b8:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <pvPortMalloc+0x188>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <pvPortMalloc+0x188>)
 80055c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <pvPortMalloc+0x188>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <pvPortMalloc+0x190>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d203      	bcs.n	80055da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <pvPortMalloc+0x188>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <pvPortMalloc+0x190>)
 80055d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x184>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <pvPortMalloc+0x194>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <pvPortMalloc+0x194>)
 80055f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055f8:	f7fe fcf8 	bl	8003fec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <pvPortMalloc+0x174>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <pvPortMalloc+0x172>
	return pvReturn;
 800561c:	69fb      	ldr	r3, [r7, #28]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20004b40 	.word	0x20004b40
 800562c:	20004b54 	.word	0x20004b54
 8005630:	20004b44 	.word	0x20004b44
 8005634:	20004b38 	.word	0x20004b38
 8005638:	20004b48 	.word	0x20004b48
 800563c:	20004b4c 	.word	0x20004b4c

08005640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04d      	beq.n	80056ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005652:	2308      	movs	r3, #8
 8005654:	425b      	negs	r3, r3
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <vPortFree+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <vPortFree+0x44>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60fb      	str	r3, [r7, #12]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <vPortFree+0x62>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60bb      	str	r3, [r7, #8]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <vPortFree+0xb8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01e      	beq.n	80056ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11a      	bne.n	80056ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <vPortFree+0xb8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056c8:	f7fe fc82 	bl	8003fd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <vPortFree+0xbc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <vPortFree+0xbc>)
 80056d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f000 f874 	bl	80057c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <vPortFree+0xc0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	4a06      	ldr	r2, [pc, #24]	; (8005700 <vPortFree+0xc0>)
 80056e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056ea:	f7fe fc7f 	bl	8003fec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20004b54 	.word	0x20004b54
 80056fc:	20004b44 	.word	0x20004b44
 8005700:	20004b50 	.word	0x20004b50

08005704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800570a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800570e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <prvHeapInit+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3307      	adds	r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <prvHeapInit+0xac>)
 8005734:	4413      	add	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800573c:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <prvHeapInit+0xb0>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <prvHeapInit+0xb0>)
 8005744:	2200      	movs	r2, #0
 8005746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005750:	2208      	movs	r2, #8
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvHeapInit+0xb4>)
 8005764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvHeapInit+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvHeapInit+0xb4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvHeapInit+0xb4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <prvHeapInit+0xb8>)
 8005792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <prvHeapInit+0xbc>)
 800579a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <prvHeapInit+0xc0>)
 800579e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000f38 	.word	0x20000f38
 80057b4:	20004b38 	.word	0x20004b38
 80057b8:	20004b40 	.word	0x20004b40
 80057bc:	20004b48 	.word	0x20004b48
 80057c0:	20004b44 	.word	0x20004b44
 80057c4:	20004b54 	.word	0x20004b54

080057c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <prvInsertBlockIntoFreeList+0xac>)
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e002      	b.n	80057dc <prvInsertBlockIntoFreeList+0x14>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d8f7      	bhi.n	80057d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d108      	bne.n	800580a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	441a      	add	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	441a      	add	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d118      	bne.n	8005850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d00d      	beq.n	8005846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e008      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e003      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d002      	beq.n	8005866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20004b38 	.word	0x20004b38
 8005878:	20004b40 	.word	0x20004b40

0800587c <__libc_init_array>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4d0d      	ldr	r5, [pc, #52]	; (80058b4 <__libc_init_array+0x38>)
 8005880:	4c0d      	ldr	r4, [pc, #52]	; (80058b8 <__libc_init_array+0x3c>)
 8005882:	1b64      	subs	r4, r4, r5
 8005884:	10a4      	asrs	r4, r4, #2
 8005886:	2600      	movs	r6, #0
 8005888:	42a6      	cmp	r6, r4
 800588a:	d109      	bne.n	80058a0 <__libc_init_array+0x24>
 800588c:	4d0b      	ldr	r5, [pc, #44]	; (80058bc <__libc_init_array+0x40>)
 800588e:	4c0c      	ldr	r4, [pc, #48]	; (80058c0 <__libc_init_array+0x44>)
 8005890:	f000 f8f2 	bl	8005a78 <_init>
 8005894:	1b64      	subs	r4, r4, r5
 8005896:	10a4      	asrs	r4, r4, #2
 8005898:	2600      	movs	r6, #0
 800589a:	42a6      	cmp	r6, r4
 800589c:	d105      	bne.n	80058aa <__libc_init_array+0x2e>
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a4:	4798      	blx	r3
 80058a6:	3601      	adds	r6, #1
 80058a8:	e7ee      	b.n	8005888 <__libc_init_array+0xc>
 80058aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ae:	4798      	blx	r3
 80058b0:	3601      	adds	r6, #1
 80058b2:	e7f2      	b.n	800589a <__libc_init_array+0x1e>
 80058b4:	08005c18 	.word	0x08005c18
 80058b8:	08005c18 	.word	0x08005c18
 80058bc:	08005c18 	.word	0x08005c18
 80058c0:	08005c1c 	.word	0x08005c1c

080058c4 <__retarget_lock_acquire_recursive>:
 80058c4:	4770      	bx	lr

080058c6 <__retarget_lock_release_recursive>:
 80058c6:	4770      	bx	lr

080058c8 <memcpy>:
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d0:	d100      	bne.n	80058d4 <memcpy+0xc>
 80058d2:	4770      	bx	lr
 80058d4:	b510      	push	{r4, lr}
 80058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058de:	4291      	cmp	r1, r2
 80058e0:	d1f9      	bne.n	80058d6 <memcpy+0xe>
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <cleanup_glue>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	6809      	ldr	r1, [r1, #0]
 80058fa:	4605      	mov	r5, r0
 80058fc:	b109      	cbz	r1, 8005902 <cleanup_glue+0xe>
 80058fe:	f7ff fff9 	bl	80058f4 <cleanup_glue>
 8005902:	4621      	mov	r1, r4
 8005904:	4628      	mov	r0, r5
 8005906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800590a:	f000 b869 	b.w	80059e0 <_free_r>
	...

08005910 <_reclaim_reent>:
 8005910:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <_reclaim_reent+0xb4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4283      	cmp	r3, r0
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	4604      	mov	r4, r0
 800591a:	d051      	beq.n	80059c0 <_reclaim_reent+0xb0>
 800591c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800591e:	b143      	cbz	r3, 8005932 <_reclaim_reent+0x22>
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d14a      	bne.n	80059bc <_reclaim_reent+0xac>
 8005926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005928:	6819      	ldr	r1, [r3, #0]
 800592a:	b111      	cbz	r1, 8005932 <_reclaim_reent+0x22>
 800592c:	4620      	mov	r0, r4
 800592e:	f000 f857 	bl	80059e0 <_free_r>
 8005932:	6961      	ldr	r1, [r4, #20]
 8005934:	b111      	cbz	r1, 800593c <_reclaim_reent+0x2c>
 8005936:	4620      	mov	r0, r4
 8005938:	f000 f852 	bl	80059e0 <_free_r>
 800593c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800593e:	b111      	cbz	r1, 8005946 <_reclaim_reent+0x36>
 8005940:	4620      	mov	r0, r4
 8005942:	f000 f84d 	bl	80059e0 <_free_r>
 8005946:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005948:	b111      	cbz	r1, 8005950 <_reclaim_reent+0x40>
 800594a:	4620      	mov	r0, r4
 800594c:	f000 f848 	bl	80059e0 <_free_r>
 8005950:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005952:	b111      	cbz	r1, 800595a <_reclaim_reent+0x4a>
 8005954:	4620      	mov	r0, r4
 8005956:	f000 f843 	bl	80059e0 <_free_r>
 800595a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800595c:	b111      	cbz	r1, 8005964 <_reclaim_reent+0x54>
 800595e:	4620      	mov	r0, r4
 8005960:	f000 f83e 	bl	80059e0 <_free_r>
 8005964:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005966:	b111      	cbz	r1, 800596e <_reclaim_reent+0x5e>
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f839 	bl	80059e0 <_free_r>
 800596e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005970:	b111      	cbz	r1, 8005978 <_reclaim_reent+0x68>
 8005972:	4620      	mov	r0, r4
 8005974:	f000 f834 	bl	80059e0 <_free_r>
 8005978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800597a:	b111      	cbz	r1, 8005982 <_reclaim_reent+0x72>
 800597c:	4620      	mov	r0, r4
 800597e:	f000 f82f 	bl	80059e0 <_free_r>
 8005982:	69a3      	ldr	r3, [r4, #24]
 8005984:	b1e3      	cbz	r3, 80059c0 <_reclaim_reent+0xb0>
 8005986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005988:	4620      	mov	r0, r4
 800598a:	4798      	blx	r3
 800598c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800598e:	b1b9      	cbz	r1, 80059c0 <_reclaim_reent+0xb0>
 8005990:	4620      	mov	r0, r4
 8005992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005996:	f7ff bfad 	b.w	80058f4 <cleanup_glue>
 800599a:	5949      	ldr	r1, [r1, r5]
 800599c:	b941      	cbnz	r1, 80059b0 <_reclaim_reent+0xa0>
 800599e:	3504      	adds	r5, #4
 80059a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a2:	2d80      	cmp	r5, #128	; 0x80
 80059a4:	68d9      	ldr	r1, [r3, #12]
 80059a6:	d1f8      	bne.n	800599a <_reclaim_reent+0x8a>
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 f819 	bl	80059e0 <_free_r>
 80059ae:	e7ba      	b.n	8005926 <_reclaim_reent+0x16>
 80059b0:	680e      	ldr	r6, [r1, #0]
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 f814 	bl	80059e0 <_free_r>
 80059b8:	4631      	mov	r1, r6
 80059ba:	e7ef      	b.n	800599c <_reclaim_reent+0x8c>
 80059bc:	2500      	movs	r5, #0
 80059be:	e7ef      	b.n	80059a0 <_reclaim_reent+0x90>
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	bf00      	nop
 80059c4:	20000010 	.word	0x20000010

080059c8 <__malloc_lock>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__malloc_lock+0x8>)
 80059ca:	f7ff bf7b 	b.w	80058c4 <__retarget_lock_acquire_recursive>
 80059ce:	bf00      	nop
 80059d0:	20004b58 	.word	0x20004b58

080059d4 <__malloc_unlock>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__malloc_unlock+0x8>)
 80059d6:	f7ff bf76 	b.w	80058c6 <__retarget_lock_release_recursive>
 80059da:	bf00      	nop
 80059dc:	20004b58 	.word	0x20004b58

080059e0 <_free_r>:
 80059e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059e2:	2900      	cmp	r1, #0
 80059e4:	d044      	beq.n	8005a70 <_free_r+0x90>
 80059e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ea:	9001      	str	r0, [sp, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f1a1 0404 	sub.w	r4, r1, #4
 80059f2:	bfb8      	it	lt
 80059f4:	18e4      	addlt	r4, r4, r3
 80059f6:	f7ff ffe7 	bl	80059c8 <__malloc_lock>
 80059fa:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <_free_r+0x94>)
 80059fc:	9801      	ldr	r0, [sp, #4]
 80059fe:	6813      	ldr	r3, [r2, #0]
 8005a00:	b933      	cbnz	r3, 8005a10 <_free_r+0x30>
 8005a02:	6063      	str	r3, [r4, #4]
 8005a04:	6014      	str	r4, [r2, #0]
 8005a06:	b003      	add	sp, #12
 8005a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a0c:	f7ff bfe2 	b.w	80059d4 <__malloc_unlock>
 8005a10:	42a3      	cmp	r3, r4
 8005a12:	d908      	bls.n	8005a26 <_free_r+0x46>
 8005a14:	6825      	ldr	r5, [r4, #0]
 8005a16:	1961      	adds	r1, r4, r5
 8005a18:	428b      	cmp	r3, r1
 8005a1a:	bf01      	itttt	eq
 8005a1c:	6819      	ldreq	r1, [r3, #0]
 8005a1e:	685b      	ldreq	r3, [r3, #4]
 8005a20:	1949      	addeq	r1, r1, r5
 8005a22:	6021      	streq	r1, [r4, #0]
 8005a24:	e7ed      	b.n	8005a02 <_free_r+0x22>
 8005a26:	461a      	mov	r2, r3
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b10b      	cbz	r3, 8005a30 <_free_r+0x50>
 8005a2c:	42a3      	cmp	r3, r4
 8005a2e:	d9fa      	bls.n	8005a26 <_free_r+0x46>
 8005a30:	6811      	ldr	r1, [r2, #0]
 8005a32:	1855      	adds	r5, r2, r1
 8005a34:	42a5      	cmp	r5, r4
 8005a36:	d10b      	bne.n	8005a50 <_free_r+0x70>
 8005a38:	6824      	ldr	r4, [r4, #0]
 8005a3a:	4421      	add	r1, r4
 8005a3c:	1854      	adds	r4, r2, r1
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	6011      	str	r1, [r2, #0]
 8005a42:	d1e0      	bne.n	8005a06 <_free_r+0x26>
 8005a44:	681c      	ldr	r4, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	6053      	str	r3, [r2, #4]
 8005a4a:	4421      	add	r1, r4
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	e7da      	b.n	8005a06 <_free_r+0x26>
 8005a50:	d902      	bls.n	8005a58 <_free_r+0x78>
 8005a52:	230c      	movs	r3, #12
 8005a54:	6003      	str	r3, [r0, #0]
 8005a56:	e7d6      	b.n	8005a06 <_free_r+0x26>
 8005a58:	6825      	ldr	r5, [r4, #0]
 8005a5a:	1961      	adds	r1, r4, r5
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	bf04      	itt	eq
 8005a60:	6819      	ldreq	r1, [r3, #0]
 8005a62:	685b      	ldreq	r3, [r3, #4]
 8005a64:	6063      	str	r3, [r4, #4]
 8005a66:	bf04      	itt	eq
 8005a68:	1949      	addeq	r1, r1, r5
 8005a6a:	6021      	streq	r1, [r4, #0]
 8005a6c:	6054      	str	r4, [r2, #4]
 8005a6e:	e7ca      	b.n	8005a06 <_free_r+0x26>
 8005a70:	b003      	add	sp, #12
 8005a72:	bd30      	pop	{r4, r5, pc}
 8005a74:	20004b5c 	.word	0x20004b5c

08005a78 <_init>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr

08005a84 <_fini>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr
